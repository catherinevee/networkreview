Azure Security Best Practices
==============================

This document provides comprehensive security best practices for Microsoft Azure cloud environments, covering identity and access management, network security, data protection, compliance, monitoring, and governance.

Introduction
------------

Securing cloud infrastructure requires a shared responsibility model where both Microsoft and the customer play critical roles. Microsoft secures the underlying infrastructure (physical data centers, hardware, hypervisors), while customers are responsible for securing their data, applications, identities, and network configurations.

Azure provides a broad set of security services and features, but proper configuration and implementation are essential to maintain a strong security posture.

Shared Responsibility Model
----------------------------

### Microsoft's Responsibilities

- Physical security of data centers
- Physical network components
- Physical hosts and hypervisors
- Host operating system and virtualization layer

### Customer's Responsibilities (varies by service model)

**IaaS (Infrastructure as a Service):**
- Operating systems
- Network controls
- Applications
- Identity and access
- Data

**PaaS (Platform as a Service):**
- Applications
- Identity and access
- Data

**SaaS (Software as a Service):**
- Identity and access
- Data (to some extent)

**Always Customer's Responsibility:**
- Data classification and governance
- Account and access management
- Endpoint protection
- Information protection

Identity and Access Management
-------------------------------

### 1. Azure Active Directory (Azure AD) Security

**Enable Multi-Factor Authentication (MFA):**

Best Practices:
- Require MFA for all users, especially administrators
- Use Azure AD Conditional Access to enforce MFA policies
- Support multiple MFA methods (authenticator app, phone, FIDO2 keys)
- Enable risk-based MFA with Azure AD Identity Protection

Configuration:
1. Navigate to Azure AD > Security > Conditional Access
2. Create new policy
3. Assign to users/groups (e.g., all administrators)
4. Set conditions (trusted locations, device compliance)
5. Require multi-factor authentication
6. Enable policy

Example Policy:
- Who: All administrators
- Conditions: Any location except trusted networks
- Access control: Require MFA
- Result: Admins must use MFA when accessing from unknown locations

**Implement Passwordless Authentication:**

Methods:
- Windows Hello for Business
- FIDO2 security keys
- Microsoft Authenticator app (passwordless sign-in)
- Azure AD certificate-based authentication

Benefits:
- Eliminates password-based attacks
- Improved user experience
- Stronger security posture

**Use Privileged Identity Management (PIM):**

Capabilities:
- Just-in-time privileged access
- Time-bound access to resources
- Approval workflow for elevated access
- Access reviews and audit logging
- MFA requirement for role activation

Best Practices:
- Enable PIM for all privileged roles
- Use eligible assignments instead of permanent
- Set maximum activation duration (e.g., 8 hours)
- Require justification for activation
- Require approval for highly privileged roles
- Enable MFA for role activation
- Conduct regular access reviews

Configuration Example:
1. Navigate to Azure AD > Privileged Identity Management
2. Select Azure AD roles or Azure resources
3. Configure role settings (activation duration, approval, MFA)
4. Assign eligible members (not permanent)
5. Users request activation when needed
6. Activation requires MFA and justification

**Implement Conditional Access Policies:**

Common Policies:
- Require MFA for all users
- Block legacy authentication protocols
- Require managed devices for access
- Block access from untrusted locations
- Require terms of use acceptance
- Require compliant or hybrid joined devices

Advanced Policies:
- Risk-based access (sign-in risk, user risk)
- Application-specific controls
- Session controls (limited access)
- Require approved client apps

Example Policies:

Policy 1: Block Legacy Authentication
- Users: All users
- Cloud apps: All cloud apps
- Conditions: Client apps (legacy authentication protocols)
- Access control: Block access

Policy 2: Require MFA for Administrators
- Users: Directory role = Global Administrator
- Cloud apps: All cloud apps
- Conditions: Any location
- Access control: Require MFA

Policy 3: Require Compliant Device
- Users: All users
- Cloud apps: Office 365
- Conditions: Any device
- Access control: Require device to be marked as compliant

**Secure Service Principals and Managed Identities:**

Best Practices:
- Use managed identities instead of service principals where possible
- Avoid storing credentials in code or configuration files
- Rotate service principal secrets regularly (90 days)
- Use certificate-based authentication over secrets
- Apply least privilege to service principals
- Monitor service principal usage

Managed Identity Types:
- System-assigned: Lifecycle tied to resource
- User-assigned: Independent lifecycle, reusable

Usage Example:
```
# System-assigned managed identity for VM
az vm identity assign --name MyVM --resource-group MyRG

# Grant permissions to managed identity
az role assignment create \
  --assignee <managed-identity-principal-id> \
  --role "Storage Blob Data Contributor" \
  --scope /subscriptions/{subscription-id}/resourceGroups/{rg-name}/providers/Microsoft.Storage/storageAccounts/{storage-account}
```

**Implement Role-Based Access Control (RBAC):**

Principles:
- Least privilege: Grant minimum permissions needed
- Separation of duties: No single user has excessive access
- Use built-in roles when possible
- Create custom roles for specific needs
- Apply RBAC at appropriate scope (management group, subscription, resource group, resource)

Common Built-in Roles:
- Owner: Full access including access management
- Contributor: Create and manage resources (no access management)
- Reader: View resources only
- User Access Administrator: Manage access only

Security-Focused Roles:
- Security Admin: Manage security policies and settings
- Security Reader: View security settings
- Key Vault Administrator: Full access to Key Vault
- Key Vault Secrets User: Read secrets only

Best Practices:
- Assign roles at resource group level, not resource level (easier management)
- Use groups instead of individual users
- Regularly review role assignments
- Remove stale assignments
- Document custom roles

### 2. Identity Protection

**Enable Azure AD Identity Protection:**

Risk Detections:
- Anonymous IP address use
- Atypical travel
- Malware-linked IP address
- Unfamiliar sign-in properties
- Leaked credentials
- Password spray attacks
- Azure AD threat intelligence

Risk Levels:
- Low: Minor concern
- Medium: Moderate concern
- High: Strong indication of compromise

Automated Responses:
- Require password change for user risk
- Require MFA for sign-in risk
- Block access for high-risk users
- Notify administrators of risky users

Configuration:
1. Navigate to Azure AD > Security > Identity Protection
2. Configure user risk policy (e.g., high risk = require password change)
3. Configure sign-in risk policy (e.g., medium/high = require MFA)
4. Enable risk-based Conditional Access
5. Monitor risk detections dashboard

**Implement Access Reviews:**

Purpose:
- Regularly review who has access to resources
- Remove unnecessary access
- Ensure compliance with policies
- Reduce attack surface

Review Scope:
- Azure AD roles
- Azure resource roles
- Group memberships
- Application access

Configuration:
1. Navigate to Azure AD > Identity Governance > Access Reviews
2. Create new review
3. Select scope (groups, applications, Azure roles)
4. Configure reviewers (managers, resource owners, users themselves)
5. Set recurrence (quarterly recommended)
6. Auto-apply decisions if desired
7. Launch review

Network Security
----------------

### 1. Network Segmentation

**Use Virtual Networks (VNets) and Subnets:**

Best Practices:
- Segment workloads into separate subnets
- Use separate VNets for production and non-production
- Implement hub-and-spoke topology for enterprise
- Use /24 or larger subnets (avoid /29, /30)
- Reserve IP space for growth
- Document IP address allocation

Example Segmentation:
- Management subnet: Jump boxes, monitoring
- Web tier subnet: Load balancers, web servers
- Application tier subnet: Application servers
- Data tier subnet: Databases
- Gateway subnet: VPN/ExpressRoute gateway

**Implement Network Security Groups (NSGs):**

Purpose:
- Layer 4 (TCP/UDP) firewall
- Filter traffic to/from subnets and NICs
- Allow or deny based on source/destination IP, port, protocol

Best Practices:
- Create NSGs at subnet level (not NIC level)
- Use application security groups (ASGs) for easier management
- Follow least privilege (deny by default, allow specific)
- Use service tags instead of IP addresses
- Document all rules with descriptions
- Review NSG rules regularly

Rule Priority:
- Lower number = higher priority
- Rules evaluated in order
- First match wins
- Default rules cannot be deleted (lowest priority)

Example NSG Rules:
```
Priority  Name           Port  Protocol  Source       Destination  Action
100       Allow-HTTPS    443   TCP       Internet     WebSubnet    Allow
110       Allow-SSH      22    TCP       CorpNetwork  *            Allow
200       Allow-SQL      1433  TCP       AppSubnet    DataSubnet   Allow
4096      Deny-All       *     *         *            *            Deny
```

**Use Application Security Groups (ASGs):**

Benefits:
- Group VMs by function (web servers, app servers, databases)
- Simplify NSG rules
- Dynamic membership
- Easier to maintain

Example:
```
# Create ASGs
ASG-Web: All web servers
ASG-App: All application servers
ASG-Data: All database servers

# NSG rules using ASGs
Allow HTTPS from Internet to ASG-Web
Allow 8080 from ASG-Web to ASG-App
Allow 1433 from ASG-App to ASG-Data
```

### 2. Azure Firewall

**Deploy Azure Firewall:**

Capabilities:
- Fully stateful firewall as a service
- Built-in high availability
- Threat intelligence-based filtering
- FQDN filtering for outbound traffic
- DNAT for inbound traffic
- Application and network rules
- Forced tunneling support

SKUs:
- Standard: Application and network filtering
- Premium: TLS inspection, IDPS, URL filtering, web categories

Deployment Model:
1. Create dedicated subnet (AzureFirewallSubnet)
2. Deploy Azure Firewall with public IP
3. Create route table to direct traffic through firewall
4. Configure firewall rules
5. Enable diagnostic logging

Rule Types:
- Application rules: Filter based on FQDN (e.g., allow *.microsoft.com)
- Network rules: Filter based on IP, port, protocol
- NAT rules: Translate inbound traffic (DNAT)

Best Practices:
- Use Azure Firewall Manager for multiple firewalls
- Implement hub-and-spoke with firewall in hub
- Use threat intelligence in prevention mode
- Enable diagnostic logs to Log Analytics
- Use rule collections for organization
- Document rule purpose and owner

Example Configuration:
```
# Application rule collection
Name: Allow-Microsoft-Services
Priority: 100
Action: Allow
Rules:
  - Allow *.microsoft.com, *.windows.net (HTTPS)
  - Allow *.ubuntu.com, *.debian.org (HTTP/HTTPS)

# Network rule collection
Name: Allow-DNS
Priority: 200
Action: Allow
Rules:
  - Allow TCP/UDP 53 to Azure DNS (168.63.129.16)
```

### 3. DDoS Protection

**Enable Azure DDoS Protection:**

Tiers:
- Basic: Free, automatic protection for Azure platform
- Standard: Enhanced protection with tuning, monitoring, support

Standard Features:
- Adaptive tuning based on traffic patterns
- Real-time attack metrics and alerts
- Attack analytics and reports
- DDoS rapid response support
- Cost guarantee (scale-out costs reimbursed during attack)

Best Practices:
- Enable DDoS Standard for production workloads
- Configure DDoS alerts
- Review DDoS metrics regularly
- Test response procedures
- Document incident response plan

Configuration:
1. Navigate to DDoS Protection plans
2. Create new DDoS plan
3. Associate virtual networks with plan
4. Configure alerts for attacks
5. Enable diagnostic logs

### 4. Private Endpoints and Service Endpoints

**Use Private Endpoints for PaaS Services:**

Benefits:
- Access PaaS services over private IP
- Traffic stays on Microsoft backbone
- No public Internet exposure
- Eliminates data exfiltration risk

Supported Services:
- Storage accounts
- SQL Database
- Key Vault
- Cosmos DB
- App Services
- Many more

Configuration:
1. Create private endpoint in VNet
2. Select target PaaS service
3. Private DNS zone created automatically
4. Disable public access on PaaS service
5. Access service via private IP

**Use Service Endpoints (alternative):**

Differences from Private Endpoints:
- Service endpoints: Traffic routed optimally, service still has public IP
- Private endpoints: Traffic uses private IP, no public exposure

When to Use:
- Service endpoints: Cost-effective, basic security
- Private endpoints: Maximum security, compliance requirements

### 5. Azure Bastion

**Deploy Azure Bastion for Secure VM Access:**

Benefits:
- RDP/SSH access without public IPs
- No need for jump boxes
- Integrated with Azure portal
- Protected against port scanning
- SSL/TLS encrypted sessions

Deployment:
1. Create AzureBastionSubnet (/26 or larger)
2. Deploy Azure Bastion with public IP
3. Remove public IPs from VMs
4. Remove RDP/SSH rules from NSGs
5. Access VMs through Azure portal

SKUs:
- Basic: RDP/SSH connectivity
- Standard: Additional features (native client, IP-based connection, multiple concurrent sessions)

Best Practices:
- Use Bastion instead of jump boxes
- Deploy in hub VNet for centralized access
- Enable diagnostic logging
- Use Bastion with Just-in-Time access

Data Protection
---------------

### 1. Encryption at Rest

**Azure Storage Encryption:**

Default Behavior:
- All Azure Storage encrypted by default
- Microsoft-managed keys (MMK) used automatically
- 256-bit AES encryption

Customer-Managed Keys:
- Store keys in Azure Key Vault
- Full control over key lifecycle
- Ability to rotate, disable, audit keys

Best Practices:
- Use customer-managed keys for sensitive data
- Enable soft delete and purge protection on Key Vault
- Rotate keys regularly (annually recommended)
- Monitor key access

Configuration:
1. Create Azure Key Vault
2. Create or import encryption key
3. Grant storage account access to Key Vault
4. Configure storage account to use customer-managed key
5. Enable key rotation policy

**Azure Disk Encryption:**

Options:
- Server-side encryption (SSE): Default, transparent
- Azure Disk Encryption (ADE): Uses BitLocker (Windows) or dm-crypt (Linux)
- Encryption at host: Encrypt temp disks and caches

When to Use ADE:
- Compliance requirements for volume encryption
- Additional layer of encryption
- Key management via Key Vault

Configuration:
1. Create Key Vault with encryption enabled
2. Create key encryption key (KEK)
3. Enable encryption on VM disks
4. Monitor encryption status

**SQL Database Transparent Data Encryption (TDE):**

Default:
- TDE enabled by default for Azure SQL Database
- Protects data at rest

Options:
- Service-managed TDE: Microsoft manages keys
- Customer-managed TDE: Bring your own key (BYOK)

Best Practices:
- Use customer-managed TDE for sensitive databases
- Store TDE keys in Key Vault
- Enable geo-replication with same encryption keys
- Monitor TDE certificate expiration

### 2. Encryption in Transit

**Enforce TLS 1.2 or Higher:**

Best Practices:
- Disable TLS 1.0 and 1.1
- Require TLS 1.2 minimum for all services
- Use strong cipher suites
- Implement HSTS (HTTP Strict Transport Security)

Configuration by Service:
- Storage accounts: Require secure transfer
- SQL Database: Encrypt connection setting
- App Services: TLS version in configuration
- API Management: TLS policy

**Use Azure Front Door or Application Gateway with SSL:**

Capabilities:
- SSL/TLS termination
- End-to-end SSL encryption
- Certificate management
- WAF integration

Best Practices:
- Use managed certificates (auto-renewal)
- Implement end-to-end SSL (re-encrypt backend traffic)
- Enable HTTP to HTTPS redirect
- Configure SSL policies (minimum TLS version)

### 3. Data Classification and Protection

**Implement Azure Information Protection (AIP):**

Capabilities:
- Classify and label documents
- Apply protection (encryption, watermarks)
- Track document usage
- Prevent data leakage

Labels:
- Public: No protection
- General: Basic protection
- Confidential: Encryption, access restrictions
- Highly Confidential: Strong encryption, limited access

Best Practices:
- Define classification taxonomy
- Apply labels automatically based on content
- Educate users on labeling
- Monitor label usage
- Integrate with DLP policies

**Use Azure Purview for Data Governance:**

Capabilities:
- Data discovery and cataloging
- Data lineage tracking
- Sensitive data identification
- Compliance reporting

Best Practices:
- Scan all data sources
- Classify sensitive data
- Monitor data access
- Generate compliance reports

### 4. Backup and Disaster Recovery

**Implement Azure Backup:**

Protected Resources:
- Virtual machines
- SQL databases
- SAP HANA databases
- Azure file shares
- On-premises data

Best Practices:
- Enable backup for all production workloads
- Use GRS (Geo-Redundant Storage) for backup vault
- Test restore procedures regularly
- Implement retention policies
- Enable soft delete (14-90 days)
- Monitor backup jobs
- Document recovery procedures

Configuration:
1. Create Recovery Services vault
2. Configure backup policy (frequency, retention)
3. Enable backup on resources
4. Verify first backup completes
5. Test restore procedure
6. Set up alerts for failed backups

**Implement Azure Site Recovery:**

Use Cases:
- Disaster recovery (Azure region to region)
- Migration to Azure
- Business continuity

RPO and RTO:
- RPO (Recovery Point Objective): 60 seconds possible
- RTO (Recovery Time Objective): Minutes to hours

Best Practices:
- Replicate to different Azure region
- Test failover regularly (quarterly)
- Document failover procedures
- Implement runbooks for automation
- Monitor replication health
- Define recovery priorities

Security Monitoring and Threat Protection
------------------------------------------

### 1. Microsoft Defender for Cloud

**Enable Defender for Cloud Plans:**

Available Plans:
- Defender for Servers: VM protection, vulnerability assessment, JIT
- Defender for App Service: Web app protection
- Defender for Storage: Malware scanning, sensitive data threat detection
- Defender for SQL: Vulnerability assessment, threat detection
- Defender for Key Vault: Anomaly detection
- Defender for Resource Manager: Suspicious operations detection
- Defender for DNS: Anomaly detection
- Defender for Containers: Kubernetes security

Best Practices:
- Enable all relevant Defender plans
- Investigate and remediate recommendations
- Monitor Secure Score (target: 80%+)
- Configure email notifications for high-severity alerts
- Integrate with SIEM (Sentinel or third-party)
- Review security alerts daily

**Implement Just-in-Time (JIT) VM Access:**

Benefits:
- Reduces attack surface
- Blocks unauthorized access
- Auditable access
- Time-bound access

Configuration:
1. Enable Defender for Servers
2. Enable JIT on VMs
3. Configure allowed ports and time limits
4. Users request access when needed
5. Access automatically revoked after time limit

Request Flow:
1. User requests JIT access via portal/PowerShell
2. Request includes justification
3. NSG rule temporarily opened
4. User connects to VM
5. NSG rule removed after time expires

### 2. Azure Sentinel (SIEM)

**Deploy Azure Sentinel:**

Capabilities:
- Security information and event management (SIEM)
- Security orchestration, automation, and response (SOAR)
- Threat intelligence integration
- AI-powered threat detection
- Investigation and hunting

Data Sources:
- Azure AD logs
- Azure Activity logs
- Security logs (Windows, Linux)
- Firewall logs (Azure Firewall, NSG flow logs)
- Office 365 logs
- Third-party solutions (CEF, Syslog)

Best Practices:
- Connect all relevant data sources
- Enable out-of-box analytics rules
- Create custom detection rules
- Implement automation playbooks
- Define incident response procedures
- Assign incidents to analysts
- Create workbooks for visualization

Sample Analytics Rules:
- Multiple failed login attempts
- Privilege escalation attempts
- Unusual Azure resource creation
- Data exfiltration indicators
- Brute force attacks
- Compromised account indicators

**Implement Automation and Orchestration:**

Use Cases:
- Enrichment: Add threat intelligence to alerts
- Response: Block IP address, disable user account
- Notification: Send email/Teams message to SOC
- Ticketing: Create incident in ServiceNow

Example Playbooks:
- Suspicious sign-in: Require user to reset password
- Malware detected: Isolate VM, start investigation
- Anomalous resource creation: Notify security team, request approval

### 3. Logging and Auditing

**Enable Diagnostic Settings:**

Key Logs to Enable:
- Azure AD sign-in logs
- Azure AD audit logs
- Azure Activity logs (subscription level)
- Resource diagnostic logs (per resource)
- NSG flow logs
- Azure Firewall logs

Destinations:
- Log Analytics workspace (recommended)
- Storage account (long-term retention)
- Event Hub (stream to SIEM)

Best Practices:
- Enable logging on all production resources
- Retain logs for compliance period (minimum 90 days)
- Send logs to Log Analytics for analysis
- Create alerts for critical events
- Review logs regularly

**Monitor Azure Activity Log:**

Critical Events to Monitor:
- Role assignment changes
- Resource creation/deletion
- NSG rule changes
- Key Vault access
- Storage account key regeneration
- Virtual network changes

Alert Examples:
- New role assignment at subscription level
- Storage account public access enabled
- Network security group rule allowing any source
- Key Vault purge protection disabled

**Implement Query and Alerting:**

Sample KQL Queries:
```
// Failed sign-ins from unknown locations
SigninLogs
| where ResultType != 0
| where Location !in ("known_location1", "known_location2")
| summarize FailedAttempts = count() by UserPrincipalName, Location

// New role assignments
AzureActivity
| where OperationName == "Create role assignment"
| project TimeGenerated, Caller, Properties

// Resources deleted in production
AzureActivity
| where ResourceGroup contains "prod"
| where OperationName contains "delete"
| project TimeGenerated, Caller, OperationName, ResourceId
```

Compliance and Governance
--------------------------

### 1. Azure Policy

**Implement Governance Policies:**

Common Built-in Policies:
- Require resource tags
- Allowed locations for resources
- Allowed VM SKU sizes
- Require encryption for storage accounts
- Require NSG on subnets
- Require backup for VMs
- Block public IP addresses

Policy Effects:
- Audit: Log non-compliance
- Deny: Block resource creation
- Append: Add required properties
- Modify: Change resource properties
- DeployIfNotExists: Deploy associated resources

Best Practices:
- Start with audit mode, then enforce
- Use policy initiatives (groups of policies)
- Apply policies at management group level
- Exclude test/dev environments from strict policies
- Review compliance regularly
- Remediate non-compliant resources

Example Policy Assignment:
```
Name: Require-Tags-on-Resources
Scope: Production subscription
Effect: Deny
Parameters: Required tags (Environment, Owner, CostCenter)
Result: Cannot create resource without required tags
```

**Use Azure Blueprints:**

Purpose:
- Repeatable environment deployment
- Package policies, RBAC, ARM templates
- Ensure compliance from day one

Components:
- Role assignments
- Policy assignments
- ARM templates
- Resource groups

Use Cases:
- New subscription provisioning
- Landing zones
- Compliant environment setup

### 2. Regulatory Compliance

**Leverage Compliance Offerings:**

Azure Compliance Certifications:
- ISO 27001, 27018
- SOC 1, 2, 3
- PCI DSS
- HIPAA/HITECH
- GDPR
- FedRAMP
- Many more

Tools:
- Microsoft Compliance Manager
- Compliance documentation in Defender for Cloud
- Azure Policy regulatory compliance initiatives

Best Practices:
- Understand compliance requirements
- Enable relevant compliance policies
- Review compliance dashboard regularly
- Document compliance controls
- Prepare for audits with Azure reports

**Implement Data Residency:**

Options:
- Choose specific Azure regions for data
- Use Azure Policy to restrict regions
- Implement Private Link for data transfer
- Use ExpressRoute for dedicated connectivity

Configuration:
```
# Policy to restrict allowed locations
{
  "policyRule": {
    "if": {
      "not": {
        "field": "location",
        "in": ["eastus", "westus"]
      }
    },
    "then": {
      "effect": "deny"
    }
  }
}
```

### 3. Cost Management and Security

**Prevent Crypto-Mining:**

Indicators:
- Unexpected high CPU usage
- Unusual network traffic
- New VMs created without approval
- VMs in unusual regions

Prevention:
- Restrict VM SKUs with Azure Policy
- Limit VM creation permissions
- Monitor resource creation in Activity Log
- Alert on unusual compute spending
- Use Defender for Cloud to detect malware

**Implement Resource Locks:**

Lock Types:
- CanNotDelete: Can modify but not delete
- ReadOnly: Cannot modify or delete

Best Practices:
- Lock production resource groups (CanNotDelete)
- Lock critical resources (ReadOnly)
- Lock virtual networks to prevent deletion
- Document lock purpose

Application Security
--------------------

### 1. Azure App Service Security

**Best Practices:**

- Enable Always On for production apps
- Use deployment slots for zero-downtime deployments
- Enable HTTPS only
- Use managed identities for authentication
- Store secrets in Key Vault (not app settings)
- Enable App Service authentication
- Implement IP restrictions
- Use VNet integration for backend access
- Enable diagnostic logging
- Use Application Insights for monitoring

**Configure App Service Authentication:**

Providers:
- Azure AD
- Microsoft Account
- Google
- Facebook
- Twitter

Benefits:
- Built-in authentication
- No code changes needed
- Token management handled

Configuration:
1. Navigate to App Service > Authentication
2. Enable App Service authentication
3. Select identity provider (Azure AD recommended)
4. Configure provider settings
5. Set action for unauthenticated requests (redirect or deny)

### 2. API Management Security

**Best Practices:**

- Use subscription keys for API access
- Implement OAuth 2.0 with Azure AD
- Apply rate limiting and quotas
- Validate JWT tokens
- Use IP filtering
- Implement backend certificate authentication
- Enable diagnostic logging
- Use named values for secrets (not policies)
- Version APIs properly
- Implement CORS policies carefully

**Sample Security Policy:**
```xml
<policies>
  <inbound>
    <validate-jwt header-name="Authorization">
      <openid-config url="https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration" />
    </validate-jwt>
    <rate-limit calls="100" renewal-period="60" />
    <ip-filter action="allow">
      <address-range from="1.2.3.0" to="1.2.3.255" />
    </ip-filter>
  </inbound>
</policies>
```

### 3. Container Security

**Azure Kubernetes Service (AKS) Security:**

Best Practices:
- Use Azure AD integration for RBAC
- Enable Azure Policy for AKS
- Use network policies (Calico or Azure)
- Implement pod security policies
- Use Azure Container Registry with private endpoints
- Scan container images for vulnerabilities
- Use managed identities for pod authentication
- Enable cluster autoscaling (prevent resource exhaustion)
- Implement HTTPS ingress with certificates
- Enable diagnostic logging

**Container Image Security:**

- Scan images in Azure Container Registry
- Use Microsoft Defender for Containers
- Implement image signing
- Use minimal base images (Alpine, distroless)
- Avoid running as root
- Remove unnecessary packages
- Keep images updated

Key Vault Best Practices
-------------------------

### Secure Key Vault Configuration

**Access Control:**
- Use Azure RBAC for Key Vault (recommended)
- Implement least privilege access
- Use separate Key Vaults for different environments
- Grant access to managed identities, not users
- Audit all Key Vault access

**Network Security:**
- Use private endpoints for Key Vault
- Disable public access if possible
- Implement firewall rules if public access needed
- Use trusted Microsoft services bypass

**Key Management:**
- Enable soft delete (90-day recovery)
- Enable purge protection (prevents immediate deletion)
- Rotate keys and secrets regularly
- Use HSM-backed keys for high-value keys
- Set expiration dates on keys and secrets
- Monitor for expiring certificates

**Logging and Monitoring:**
- Enable diagnostic logging
- Alert on all Key Vault access
- Monitor for failed access attempts
- Review access logs regularly

Configuration:
```powershell
# Enable advanced security features
az keyvault update \
  --name MyKeyVault \
  --enable-soft-delete true \
  --enable-purge-protection true \
  --retention-days 90

# Configure network rules
az keyvault network-rule add \
  --name MyKeyVault \
  --ip-address 1.2.3.4/32
```

Security Operations
-------------------

### 1. Incident Response

**Prepare Incident Response Plan:**

Phases:
1. Preparation: Policies, tools, training
2. Detection: Monitoring, alerting
3. Analysis: Investigate scope and impact
4. Containment: Isolate affected resources
5. Eradication: Remove threat
6. Recovery: Restore services
7. Post-Incident: Lessons learned

Azure Tools:
- Defender for Cloud: Detection and alerts
- Sentinel: Investigation and response
- Activity Log: Audit trail
- Automation: Response playbooks

Runbook Example:
1. Alert triggered in Sentinel
2. Analyst assigned automatically
3. Enrichment data collected (threat intel)
4. If confirmed threat: Execute playbook
   - Isolate VM from network
   - Disable compromised user account
   - Notify security team
   - Create ticket
5. Analyst investigates further
6. Document findings
7. Restore services when clear

### 2. Vulnerability Management

**Implement Continuous Scanning:**

Tools:
- Microsoft Defender Vulnerability Management
- Qualys integration (Defender for Cloud)
- Tenable integration
- Azure Policy for compliance scanning

Best Practices:
- Scan all VMs and containers
- Prioritize critical vulnerabilities
- Implement patch management process
- Monitor vulnerability trends
- Set SLAs for remediation (critical: 7 days, high: 30 days)

**Patch Management:**

Azure Update Management:
- Centralized update management for VMs
- Schedule maintenance windows
- View compliance status
- Support for Windows and Linux

Best Practices:
- Enable automatic updates for non-production
- Schedule monthly patching for production
- Test patches in dev/test first
- Maintain patch compliance >95%
- Document exceptions

### 3. Security Posture Management

**Monitor Secure Score:**

Recommendations Categories:
- Enable MFA
- Restrict network access
- Enable encryption
- Apply system updates
- Remediate vulnerabilities
- Configure security policies

Best Practices:
- Review Secure Score weekly
- Prioritize high-impact recommendations
- Track score trends over time
- Set target score (80%+)
- Address quick wins first
- Document exceptions

**Implement Continuous Compliance:**

- Review compliance dashboard in Defender for Cloud
- Address non-compliant resources
- Update policies as needed
- Generate compliance reports
- Share with stakeholders
- Conduct periodic compliance audits

Security Best Practices Checklist
----------------------------------

### Identity and Access
- [ ] Enable MFA for all users
- [ ] Implement Conditional Access policies
- [ ] Use Privileged Identity Management
- [ ] Disable legacy authentication
- [ ] Use managed identities for applications
- [ ] Implement least privilege RBAC
- [ ] Conduct quarterly access reviews
- [ ] Enable Azure AD Identity Protection

### Network Security
- [ ] Implement network segmentation with NSGs
- [ ] Deploy Azure Firewall or NVA
- [ ] Use private endpoints for PaaS services
- [ ] Enable DDoS Protection Standard
- [ ] Deploy Azure Bastion for VM access
- [ ] Enable NSG flow logs
- [ ] Remove public IPs where possible
- [ ] Implement hub-and-spoke topology

### Data Protection
- [ ] Enable encryption at rest (all storage)
- [ ] Enforce TLS 1.2 minimum
- [ ] Use customer-managed keys for sensitive data
- [ ] Enable soft delete on Key Vault
- [ ] Implement data classification
- [ ] Enable Azure Backup
- [ ] Test disaster recovery procedures
- [ ] Implement retention policies

### Security Monitoring
- [ ] Enable Defender for Cloud (all plans)
- [ ] Deploy Azure Sentinel
- [ ] Enable diagnostic logging (all resources)
- [ ] Configure security alerts
- [ ] Implement log retention (90+ days)
- [ ] Review security alerts daily
- [ ] Conduct monthly security reviews

### Governance and Compliance
- [ ] Implement Azure Policy
- [ ] Apply resource tags
- [ ] Enable regulatory compliance policies
- [ ] Use resource locks on critical resources
- [ ] Document compliance controls
- [ ] Conduct quarterly compliance audits
- [ ] Implement cost management alerts

### Application Security
- [ ] Store secrets in Key Vault
- [ ] Use managed identities for apps
- [ ] Implement application authentication
- [ ] Scan container images
- [ ] Enable HTTPS only
- [ ] Implement API security
- [ ] Use deployment slots
- [ ] Enable Application Insights

Documentation and References
-----------------------------

[1] Microsoft Azure. (2024). Azure Security Documentation.
    https://learn.microsoft.com/en-us/azure/security/
    Official Microsoft security documentation.

[2] Microsoft Azure. (2024). Azure Security Best Practices and Patterns.
    https://learn.microsoft.com/en-us/azure/security/fundamentals/best-practices-and-patterns
    Comprehensive best practices guide.

[3] Microsoft Azure. (2024). Microsoft Defender for Cloud Documentation.
    https://learn.microsoft.com/en-us/azure/defender-for-cloud/
    Security posture management and threat protection.

[4] Microsoft Azure. (2024). Azure Well-Architected Framework - Security Pillar.
    https://learn.microsoft.com/en-us/azure/architecture/framework/security/
    Architectural guidance for secure solutions.

[5] Microsoft Azure. (2024). Azure Security Benchmark.
    https://learn.microsoft.com/en-us/security/benchmark/azure/
    Prescriptive security recommendations.

[6] Microsoft Azure. (2024). Shared Responsibility in the Cloud.
    https://learn.microsoft.com/en-us/azure/security/fundamentals/shared-responsibility
    Understanding security responsibilities.

[7] Microsoft Azure. (2024). Azure AD Security Operations Guide.
    https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-introduction
    Identity security operations.

[8] Microsoft Azure. (2024). Azure Sentinel Documentation.
    https://learn.microsoft.com/en-us/azure/sentinel/
    SIEM and SOAR implementation.

[9] Microsoft Azure. (2024). Azure Policy Documentation.
    https://learn.microsoft.com/en-us/azure/governance/policy/
    Governance and compliance.

[10] CIS (Center for Internet Security). (2024). CIS Microsoft Azure Foundations Benchmark.
     https://www.cisecurity.org/benchmark/azure
     Independent security benchmark.

[11] NIST. (2024). NIST Cybersecurity Framework.
     https://www.nist.gov/cyberframework
     Security framework applicable to Azure.

[12] Microsoft Azure. (2024). Azure Compliance Documentation.
     https://learn.microsoft.com/en-us/azure/compliance/
     Compliance certifications and resources.

[13] Microsoft Security Blog.
     https://www.microsoft.com/en-us/security/blog/
     Latest security news and guidance.

[14] Azure Security Community.
     https://techcommunity.microsoft.com/t5/azure-security/bd-p/AzureSecurity
     Community discussions and insights.

[15] Microsoft Learn - Security Learning Paths.
     https://learn.microsoft.com/en-us/training/browse/?terms=security&resource_type=learning%20path
     Training and certification resources.

Summary
-------

Securing Azure environments requires a comprehensive, layered approach:

**Key Principles:**
1. **Defense in Depth**: Multiple layers of security controls
2. **Least Privilege**: Minimum necessary access
3. **Zero Trust**: Never trust, always verify
4. **Assume Breach**: Plan for compromise scenarios
5. **Shared Responsibility**: Understand your security obligations

**Critical Security Controls:**
- Strong identity and access management (MFA, Conditional Access, PIM)
- Network segmentation and perimeter security
- Encryption for data at rest and in transit
- Comprehensive monitoring and threat detection
- Automated incident response
- Regular vulnerability management
- Governance through Azure Policy
- Continuous compliance validation

**Maturity Journey:**
1. **Basic**: Enable Azure Defender, MFA, encryption
2. **Intermediate**: Conditional Access, network segmentation, monitoring
3. **Advanced**: Sentinel SIEM, automation, zero trust architecture
4. **Optimized**: AI-driven security, continuous validation, proactive threat hunting

**Success Factors:**
- Executive sponsorship and security culture
- Dedicated security team or resources
- Regular training and awareness
- Clear policies and procedures
- Continuous improvement mindset
- Integration of security into DevOps (DevSecOps)
- Regular testing and validation

Security is not a one-time implementation but an ongoing process of assessment, implementation, monitoring, and improvement. By following these best practices and leveraging Azure's comprehensive security services, organizations can build and maintain a strong security posture in the cloud.
