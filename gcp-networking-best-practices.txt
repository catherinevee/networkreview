================================================================================
                    GCP NETWORKING BEST PRACTICES
================================================================================

This document provides comprehensive best practices for designing, implementing,
and operating networks in Google Cloud Platform (GCP). It covers VPC design,
connectivity options, security, performance optimization, high availability,
and operational excellence.

================================================================================
1. VPC (VIRTUAL PRIVATE CLOUD) DESIGN
================================================================================

1.1 VPC Fundamentals
--------------------
GCP VPC is a global resource that spans all regions, providing a software-
defined network for your cloud resources.

Key Characteristics:
- Global scope: Single VPC spans multiple regions
- Subnets are regional resources (not zonal)
- No VPC peering within same project (use shared VPC instead)
- Default quota: 15 VPCs per project (can be increased)
- RFC 1918 and other private ranges supported
- Custom routes and firewall rules

VPC Types:
1. Auto Mode VPC
   - Automatically creates one subnet per region
   - Subnets use predefined IP ranges (10.128.0.0/9)
   - Simple but less flexible
   - Good for testing/development

2. Custom Mode VPC (Recommended)
   - Full control over subnet creation
   - Choose your own IP ranges
   - Better for production environments
   - Aligns with enterprise standards

Best Practice: Use Custom Mode VPCs for production workloads
✓ Provides full control over IP addressing
✓ Aligns with corporate IP address management
✓ Prevents IP conflicts with on-premises networks
✓ Supports better segmentation and organization

1.2 Subnet Design Best Practices
---------------------------------

Best Practice: Plan IP address space carefully
✓ Use RFC 1918 private address space
  - 10.0.0.0/8 (16.7M addresses)
  - 172.16.0.0/12 (1M addresses)
  - 192.168.0.0/16 (65K addresses)
✓ Avoid overlapping with on-premises networks
✓ Reserve space for future growth (3-5 years)
✓ Document IP allocation in IPAM system
✓ Use /24 or larger subnets (GCP reserves 4 IPs per subnet)

Reserved IP Addresses per Subnet:
- First IP (network address): Reserved
- Second IP (default gateway): Reserved
- Second-to-last IP: Reserved for future use
- Last IP (broadcast address): Reserved

Example: 10.1.0.0/24
- 10.1.0.0: Network address (reserved)
- 10.1.0.1: Default gateway (reserved)
- 10.1.0.2 - 10.1.0.253: Usable (252 addresses)
- 10.1.0.254: Reserved
- 10.1.0.255: Broadcast (reserved)

Best Practice: Organize subnets by environment and purpose
Production VPC (10.0.0.0/16):
├── us-central1-prod-web:     10.0.1.0/24
├── us-central1-prod-app:     10.0.2.0/24
├── us-central1-prod-db:      10.0.3.0/24
├── europe-west1-prod-web:    10.0.11.0/24
├── europe-west1-prod-app:    10.0.12.0/24
└── europe-west1-prod-db:     10.0.13.0/24

Non-Production VPC (10.1.0.0/16):
├── us-central1-dev-web:      10.1.1.0/24
├── us-central1-dev-app:      10.1.2.0/24
└── us-central1-dev-db:       10.1.3.0/24

Best Practice: Use subnet expansion when needed
✓ GCP allows expanding subnet CIDR without downtime
✓ Cannot shrink subnets once created
✓ Plan for growth but start conservative
✓ Document expansion history

Example subnet expansion:
gcloud compute networks subnets expand-ip-range prod-web \
  --region=us-central1 \
  --prefix-length=23
# Expands from /24 (254 hosts) to /23 (510 hosts)

Best Practice: Enable Private Google Access
✓ Allows VMs without external IPs to access Google APIs
✓ Traffic stays on Google's network (more secure)
✓ No egress charges for Google API traffic
✓ Required for managed services (GKE, Cloud SQL)

gcloud compute networks subnets update prod-web \
  --region=us-central1 \
  --enable-private-ip-google-access

Best Practice: Enable VPC Flow Logs selectively
✓ Enable on subnets requiring detailed traffic analysis
✓ Use sampling to reduce cost (5-10% sample rate)
✓ Send to Cloud Logging or BigQuery for analysis
✓ Consider storage and analysis costs

gcloud compute networks subnets update prod-web \
  --region=us-central1 \
  --enable-flow-logs \
  --logging-aggregation-interval=interval-5-sec \
  --logging-flow-sampling=0.1 \
  --logging-metadata=include-all

1.3 VPC Peering Best Practices
-------------------------------

VPC Peering connects two VPC networks (same or different projects).

Best Practice: Use VPC Peering for cross-project connectivity
✓ Lower latency than VPN
✓ No bandwidth bottleneck
✓ Internal IP communication
✓ No egress charges for peered traffic

Limitations to Consider:
- Transitive peering not supported (no hub-and-spoke via peering)
- Maximum 25 peering connections per VPC
- No overlapping subnet CIDR ranges
- Firewall rules don't cross peering boundary (must configure both sides)

Best Practice: Use Shared VPC instead of peering within organization
✓ Centralized network administration
✓ Better for hub-and-spoke topologies
✓ Shared resources across projects
✓ Centralized billing for network resources

Peering vs Shared VPC Decision Matrix:
┌──────────────────────┬─────────────────┬─────────────────┐
│ Requirement          │ VPC Peering     │ Shared VPC      │
├──────────────────────┼─────────────────┼─────────────────┤
│ Same organization    │ Either          │ Preferred       │
│ Different orgs       │ Yes             │ No              │
│ Centralized admin    │ No              │ Yes             │
│ Hub-and-spoke        │ No (transitive) │ Yes             │
│ Shared resources     │ Limited         │ Full            │
│ Billing separation   │ Per project     │ Centralized     │
└──────────────────────┴─────────────────┴─────────────────┘

1.4 Shared VPC Best Practices
------------------------------

Shared VPC allows multiple projects to share a common VPC network.

Architecture:
Host Project (Network Admin)
├── Shared VPC Network
│   ├── Subnet A (us-central1)
│   ├── Subnet B (europe-west1)
│   └── Subnet C (asia-east1)
│
├── Service Project 1 (App Team A)
│   └── VMs in Subnet A, B
│
└── Service Project 2 (App Team B)
    └── VMs in Subnet C

Best Practice: Use Shared VPC for multi-project organizations
✓ Centralized network administration
✓ Consistent security policies
✓ Simplified compliance
✓ Resource sharing (Cloud NAT, VPN, Interconnect)

Roles and Permissions:
- Shared VPC Admin: Creates and manages shared VPC (organization level)
- Network Admin: Manages network resources in host project
- Service Project Admin: Manages service projects
- Network User: Uses shared VPC subnets (assigned per subnet)

Best Practice: Follow least privilege for Shared VPC
✓ Grant Network User role per subnet (not entire VPC)
✓ Separate host project from service projects
✓ Use different IAM roles for network vs compute admins
✓ Audit permissions regularly

Example IAM bindings:
# Grant Service Project Admin
gcloud projects add-iam-policy-binding service-project-1 \
  --member='user:app-admin@example.com' \
  --role='roles/compute.instanceAdmin'

# Grant subnet-level Network User
gcloud compute networks subnets add-iam-policy-binding prod-web \
  --region=us-central1 \
  --member='serviceAccount:app-sa@service-project-1.iam.gserviceaccount.com' \
  --role='roles/compute.networkUser'

================================================================================
2. HYBRID CONNECTIVITY
================================================================================

2.1 Cloud VPN Best Practices
-----------------------------

Cloud VPN connects your on-premises network to GCP via IPsec VPN.

VPN Types:
1. HA VPN (High Availability VPN)
   - 99.99% SLA
   - Two interfaces, two external IPs
   - Active/Active or Active/Passive
   - Supports BGP dynamic routing
   - Recommended for production

2. Classic VPN (Legacy)
   - 99.9% SLA
   - Single interface
   - Static or dynamic routing
   - Being deprecated
   - Migrate to HA VPN

Best Practice: Use HA VPN for production workloads
✓ Higher SLA (99.99% vs 99.9%)
✓ Automatic failover
✓ Active/Active for higher bandwidth
✓ Better integration with Cloud Router

HA VPN Topology Options:

Option 1: HA VPN to Two On-Premises VPN Devices (Recommended)
[GCP HA VPN]      [On-Premises]
Interface 0 ←──→ VPN Device 1
Interface 1 ←──→ VPN Device 2

Option 2: HA VPN to Single On-Premises VPN Device (4 tunnels)
[GCP HA VPN]      [On-Premises]
Interface 0 ←──→ VPN Device (Interface 0)
Interface 0 ←──→ VPN Device (Interface 1)
Interface 1 ←──→ VPN Device (Interface 0)
Interface 1 ←──→ VPN Device (Interface 1)

Best Practice: Configure HA VPN with redundancy
✓ Use two on-premises VPN devices (separate power, network)
✓ Configure all possible tunnels (up to 4)
✓ Enable BGP for dynamic routing
✓ Set appropriate MED/AS-PATH for failover control
✓ Test failover scenarios

Example HA VPN configuration:
# Create HA VPN gateway
gcloud compute vpn-gateways create ha-vpn-gateway \
  --network=prod-vpc \
  --region=us-central1

# Create Cloud Router
gcloud compute routers create cloud-router \
  --region=us-central1 \
  --network=prod-vpc \
  --asn=65001

# Create VPN tunnels
gcloud compute vpn-tunnels create tunnel-0 \
  --peer-gcp-gateway=on-prem-vpn-gateway \
  --region=us-central1 \
  --ike-version=2 \
  --shared-secret=SECRET_0 \
  --router=cloud-router \
  --vpn-gateway=ha-vpn-gateway \
  --interface=0

# Create BGP session
gcloud compute routers add-bgp-peer cloud-router \
  --peer-name=bgp-peer-tunnel-0 \
  --interface=tunnel-0-interface \
  --peer-ip-address=169.254.1.1 \
  --peer-asn=65002 \
  --region=us-central1

Best Practice: Optimize VPN performance
✓ Use IKEv2 (better performance than IKEv1)
✓ Enable PFS (Perfect Forward Secrecy)
✓ Use AES-GCM encryption (hardware-accelerated)
✓ Configure appropriate MTU (1460 for VPN)
✓ Enable TCP MSS clamping if needed

Recommended IPsec parameters:
- IKE version: IKEv2
- Encryption: AES-256-GCM or AES-128-GCM
- Integrity: Not required with GCM
- DH Group: 14 or higher (2048-bit+)
- PFS: Enabled

Best Practice: Monitor VPN health
✓ Set up uptime checks for VPN tunnels
✓ Monitor VPN tunnel status
✓ Alert on tunnel down events
✓ Monitor throughput and packet loss
✓ Review VPN logs regularly

2.2 Cloud Interconnect Best Practices
--------------------------------------

Cloud Interconnect provides dedicated, low-latency connectivity to GCP.

Interconnect Types:

1. Dedicated Interconnect
   - Direct physical connection to Google network
   - 10 Gbps or 100 Gbps circuits
   - Available in 100+ locations worldwide
   - Best for high-bandwidth, low-latency requirements

2. Partner Interconnect
   - Through supported service provider
   - 50 Mbps to 50 Gbps capacity
   - More locations than Dedicated
   - Faster provisioning

Best Practice: Choose appropriate Interconnect type
┌────────────────────┬─────────────────────┬──────────────────────┐
│ Requirement        │ Dedicated           │ Partner              │
├────────────────────┼─────────────────────┼──────────────────────┤
│ Bandwidth          │ 10/100 Gbps         │ 50 Mbps - 50 Gbps    │
│ Proximity to PoP   │ Required            │ Not required         │
│ Setup time         │ Weeks/Months        │ Days/Weeks           │
│ Cost               │ Higher (committed)  │ Lower (flexible)     │
│ SLA                │ 99.99% (redundant)  │ 99.99% (redundant)   │
│ Use case           │ Large enterprise    │ SMB, lower bandwidth │
└────────────────────┴─────────────────────┴──────────────────────┘

Best Practice: Implement redundant Interconnect topology
✓ Minimum 2 Interconnect connections (99.99% SLA)
✓ Use different edge availability domains
✓ Separate VLANs for each attachment
✓ Configure BGP with appropriate weights
✓ Test failover regularly

Recommended Topology (Dedicated Interconnect):
┌────────────────────────────────────────────────────────────────┐
│                         GCP Region                             │
│                                                                │
│  [VLAN Attachment 1] ←→ [Cloud Router 1]                      │
│  [VLAN Attachment 2] ←→ [Cloud Router 1]                      │
│  [VLAN Attachment 3] ←→ [Cloud Router 2]                      │
│  [VLAN Attachment 4] ←→ [Cloud Router 2]                      │
│                                                                │
└────────────────────────────────────────────────────────────────┘
         ↕                    ↕
[Interconnect 1 - Zone 1] [Interconnect 2 - Zone 2]
         ↕                    ↕
[On-Premises Router 1]  [On-Premises Router 2]

Best Practice: Optimize Interconnect BGP configuration
✓ Use private ASNs for Cloud Router (64512-65534)
✓ Configure BGP MED for traffic engineering
✓ Use AS-PATH prepending for backup paths
✓ Enable BFD for fast failure detection
✓ Set appropriate BGP timers (keepalive: 20s, hold: 60s)

Example Cloud Router configuration:
gcloud compute routers create cloud-router-1 \
  --network=prod-vpc \
  --region=us-central1 \
  --asn=65001 \
  --keepalive-interval=20 \
  --advertisement-mode=CUSTOM \
  --set-advertisement-groups=ALL_SUBNETS

# Create VLAN attachment
gcloud compute interconnects attachments dedicated create vlan-attachment-1 \
  --router=cloud-router-1 \
  --region=us-central1 \
  --interconnect=my-interconnect \
  --vlan=1001

Best Practice: Monitor Interconnect health
✓ Monitor link utilization (alert at 70-80%)
✓ Track BGP session state
✓ Monitor latency and packet loss
✓ Set up alerts for link down events
✓ Review capacity monthly

2.3 Cloud Router Best Practices
--------------------------------

Cloud Router enables dynamic routing with BGP for VPN and Interconnect.

Best Practice: Use Cloud Router for dynamic routing
✓ Automatic route updates (no static routes)
✓ Faster convergence than static routing
✓ Supports multiple paths with ECMP
✓ Easier management at scale

Best Practice: Configure redundant Cloud Routers
✓ Deploy at least 2 Cloud Routers per region
✓ Use different Cloud Routers for different connections
✓ Configure appropriate BGP attributes (MED, AS-PATH)
✓ Test failover scenarios

Best Practice: Tune BGP advertisement
✓ Advertise only necessary routes (CUSTOM mode)
✓ Use route priorities for traffic engineering
✓ Configure route summarization when possible
✓ Monitor advertised and learned routes

Advertisement modes:
- DEFAULT: Advertises all subnets in region
- CUSTOM: Advertise specific IP ranges

Example custom advertisement:
gcloud compute routers update cloud-router-1 \
  --region=us-central1 \
  --advertisement-mode=CUSTOM \
  --set-advertisement-ranges=10.0.0.0/16,10.1.0.0/16

Best Practice: Enable Graceful Restart for BGP
✓ Prevents traffic loss during Cloud Router restart
✓ Maintains forwarding during control plane updates
✓ Enabled by default in Cloud Router
✓ Configure on-premises peer accordingly

================================================================================
3. SECURITY BEST PRACTICES
================================================================================

3.1 Firewall Rules Best Practices
----------------------------------

GCP firewall rules are stateful and applied at VPC level.

Best Practice: Follow defense-in-depth principle
✓ Deny all ingress traffic by default
✓ Allow only necessary traffic explicitly
✓ Use multiple layers of security
✓ Apply least privilege principle

Default Firewall Strategy:
1. Implicit deny all ingress (GCP default)
2. Implicit allow all egress (GCP default)
3. Create explicit allow rules as needed
4. Add explicit deny rules for logging denials

Best Practice: Organize firewall rules with priorities
✓ Lower number = higher priority (0-65535)
✓ Reserve ranges for different purposes:
  - 0-999: Critical allow rules
  - 1000-1999: Standard allow rules
  - 2000-2999: Logging/monitoring rules
  - 65000-65535: Explicit deny rules
✓ Document priority scheme

Best Practice: Use target tags and service accounts
✓ Prefer service accounts over tags (more secure)
✓ Use tags for grouping similar resources
✓ Avoid "apply to all" unless necessary
✓ Be specific with source/destination

Example tag-based rule:
gcloud compute firewall-rules create allow-web-traffic \
  --network=prod-vpc \
  --action=ALLOW \
  --rules=tcp:80,tcp:443 \
  --source-ranges=0.0.0.0/0 \
  --target-tags=web-server \
  --priority=1000

Example service account-based rule (preferred):
gcloud compute firewall-rules create allow-web-traffic \
  --network=prod-vpc \
  --action=ALLOW \
  --rules=tcp:80,tcp:443 \
  --source-ranges=0.0.0.0/0 \
  --target-service-accounts=web-sa@project.iam.gserviceaccount.com \
  --priority=1000

Best Practice: Use hierarchical firewall policies
✓ Define organization-wide policies
✓ Inherit policies at folder/project level
✓ Override with more specific rules as needed
✓ Centralized management for large organizations

Best Practice: Enable firewall rules logging
✓ Enable logging for critical rules
✓ Log deny rules for security monitoring
✓ Use log sampling to reduce cost (if high volume)
✓ Send logs to Cloud Logging or SIEM

gcloud compute firewall-rules update allow-web-traffic \
  --enable-logging \
  --logging-metadata=include-all

Best Practice: Regular firewall audit
✓ Review unused/redundant rules quarterly
✓ Validate rule effectiveness
✓ Check for overly permissive rules (0.0.0.0/0 sources)
✓ Remove rules with no recent hits

3.2 Cloud NAT Best Practices
-----------------------------

Cloud NAT provides outbound internet connectivity for private VMs.

Best Practice: Use Cloud NAT instead of external IPs
✓ Reduced attack surface (no inbound paths)
✓ Centralized egress control
✓ Easier to audit and monitor
✓ Reduced public IP consumption

Best Practice: Configure NAT appropriately
✓ One NAT gateway per region (not per subnet)
✓ Use manual IP allocation for production (not auto)
✓ Allocate sufficient NAT IPs for connection limits
✓ Enable logging for traffic visibility

NAT IP allocation calculation:
- Each NAT IP supports 64,512 connections
- Formula: (# VMs × avg connections/VM) ÷ 64,512 = NAT IPs needed
- Add 20% buffer for bursts

Example Cloud NAT configuration:
gcloud compute routers create nat-router \
  --network=prod-vpc \
  --region=us-central1

gcloud compute routers nats create nat-gateway \
  --router=nat-router \
  --region=us-central1 \
  --nat-all-subnet-ip-ranges \
  --nat-external-ip-pool=nat-ip-1,nat-ip-2 \
  --enable-logging \
  --log-filter=ALL

Best Practice: Monitor Cloud NAT usage
✓ Monitor NAT IP allocation and usage
✓ Alert on port exhaustion (>80% usage)
✓ Track top talkers (most connections)
✓ Review NAT logs for anomalies

3.3 Private Google Access Best Practices
-----------------------------------------

Best Practice: Enable Private Google Access
✓ VMs can reach Google APIs without external IPs
✓ Traffic stays on Google network (more secure)
✓ No egress charges for Google API traffic
✓ Required for managed services

Private Google Access Types:

1. Private Google Access (default)
   - Access to most Google APIs
   - Uses googleapis.com domains
   - Works with default DNS

2. Private Google Access for On-Premises
   - Access from on-premises via VPN/Interconnect
   - Uses private.googleapis.com or restricted.googleapis.com
   - Requires DNS configuration

3. Private Service Connect
   - Access Google APIs via internal IP addresses
   - More control over routing
   - Better for hybrid environments

Best Practice: Use appropriate Private Google Access method
✓ Default PGA: For VMs in GCP without external IPs
✓ PGA for On-Premises: For hybrid connectivity
✓ Private Service Connect: For advanced routing control

3.4 Cloud Armor Best Practices
-------------------------------

Cloud Armor provides DDoS protection and WAF capabilities.

Best Practice: Enable Cloud Armor for external services
✓ Protects against DDoS attacks
✓ Layer 7 filtering (WAF rules)
✓ Geographic restrictions
✓ Rate limiting
✓ Integrates with Cloud Load Balancer

Best Practice: Configure appropriate security policies
✓ Enable preconfigured WAF rules (OWASP Top 10)
✓ Add custom rules for application-specific threats
✓ Use adaptive protection for DDoS
✓ Configure rate limiting per client IP
✓ Enable logging for security analysis

Example Cloud Armor policy:
gcloud compute security-policies create web-security-policy \
  --description="Security policy for web applications"

# Enable preconfigured rules
gcloud compute security-policies rules create 1000 \
  --security-policy=web-security-policy \
  --expression="evaluatePreconfiguredExpr('sqli-stable')" \
  --action=deny-403

# Rate limiting
gcloud compute security-policies rules create 2000 \
  --security-policy=web-security-policy \
  --expression="true" \
  --action=rate-based-ban \
  --rate-limit-threshold-count=1000 \
  --rate-limit-threshold-interval-sec=60 \
  --ban-duration-sec=600

Best Practice: Monitor Cloud Armor metrics
✓ Track blocked requests
✓ Monitor attack patterns
✓ Review security policy effectiveness
✓ Tune rules based on false positives

3.5 VPC Service Controls Best Practices
----------------------------------------

VPC Service Controls creates security perimeters around Google Cloud resources.

Best Practice: Use VPC Service Controls for sensitive data
✓ Prevents data exfiltration
✓ Protects against unauthorized access
✓ Supports hybrid environments
✓ Complements IAM (defense in depth)

Service Perimeter Components:
- Perimeter Bridge: Connects two perimeters
- Access Levels: Defines who can access resources
- VPC Accessible Services: Lists allowed services

Best Practice: Design service perimeters carefully
✓ Start with dry-run mode to identify issues
✓ Group resources by sensitivity level
✓ Use perimeter bridges for cross-perimeter access
✓ Document perimeter design and rationale

Example VPC Service Controls:
# Create access level
gcloud access-context-manager levels create corp_network \
  --policy=POLICY_NAME \
  --basic-level-spec=access-level.yaml

# Create service perimeter
gcloud access-context-manager perimeters create prod_perimeter \
  --title="Production Perimeter" \
  --resources=projects/123456789 \
  --restricted-services=storage.googleapis.com,bigquery.googleapis.com \
  --access-levels=corp_network

================================================================================
4. LOAD BALANCING BEST PRACTICES
================================================================================

4.1 Load Balancer Selection
----------------------------

GCP offers multiple load balancing options:

External Load Balancers:
1. External Application Load Balancer (Layer 7)
   - HTTPS, HTTP/2, HTTP/3
   - Global or regional
   - URL-based routing, host-based routing
   - SSL termination, Cloud CDN integration

2. External Network Load Balancer (Layer 4)
   - TCP/UDP
   - Regional only
   - Pass-through or proxy mode
   - Source IP preservation

3. External Protocol Forwarding
   - For protocols other than HTTP(S)/TCP/UDP
   - Regional
   - Limited features

Internal Load Balancers:
1. Internal Application Load Balancer (Layer 7)
   - HTTP(S) within VPC
   - Regional
   - Private IP only

2. Internal Network Load Balancer (Layer 4)
   - TCP/UDP within VPC
   - Regional
   - Private IP only

Best Practice: Choose appropriate load balancer type
┌─────────────────────┬──────────────────────┬─────────────────────┐
│ Use Case            │ Load Balancer        │ Scope               │
├─────────────────────┼──────────────────────┼─────────────────────┤
│ External HTTPS      │ External App LB      │ Global/Regional     │
│ External TCP/UDP    │ External Network LB  │ Regional            │
│ Internal HTTPS      │ Internal App LB      │ Regional            │
│ Internal TCP/UDP    │ Internal Network LB  │ Regional            │
│ Multi-region web    │ External App LB      │ Global              │
│ Database (internal) │ Internal Network LB  │ Regional            │
└─────────────────────┴──────────────────────┴─────────────────────┘

4.2 External Application Load Balancer Best Practices
------------------------------------------------------

Best Practice: Use global load balancing for multi-region services
✓ Automatic failover between regions
✓ Lowest latency routing to users
✓ Single anycast IP address
✓ Integrated with Cloud CDN

Best Practice: Configure health checks properly
✓ Use HTTP health checks (not just TCP)
✓ Set appropriate intervals (avoid too frequent)
✓ Configure realistic timeout values
✓ Use separate health check endpoint

Example health check:
gcloud compute health-checks create http web-health-check \
  --port=80 \
  --request-path=/health \
  --check-interval=10s \
  --timeout=5s \
  --unhealthy-threshold=3 \
  --healthy-threshold=2

Best Practice: Implement proper backend configuration
✓ Use managed instance groups for auto-scaling
✓ Configure appropriate balancing mode (RATE or UTILIZATION)
✓ Set connection draining timeout (30-300s)
✓ Enable Cloud CDN for static content
✓ Use SSL certificates from Certificate Manager

Best Practice: Optimize SSL/TLS configuration
✓ Use managed SSL certificates (auto-renewal)
✓ Support TLS 1.2 minimum (disable TLS 1.0/1.1)
✓ Enable HTTP/2 and HTTP/3 (QUIC)
✓ Configure appropriate SSL policies

Example SSL policy:
gcloud compute ssl-policies create modern-ssl-policy \
  --profile=MODERN \
  --min-tls-version=1.2

Best Practice: Use Cloud CDN effectively
✓ Enable for static content
✓ Configure appropriate cache modes
✓ Set proper Cache-Control headers
✓ Use signed URLs for restricted content
✓ Monitor cache hit ratio

Best Practice: Implement security features
✓ Enable Cloud Armor
✓ Configure IAP (Identity-Aware Proxy) for authentication
✓ Use Google-managed SSL certificates
✓ Implement appropriate timeout values
✓ Enable logging for analysis

4.3 Internal Load Balancer Best Practices
------------------------------------------

Best Practice: Use internal load balancers for internal services
✓ Database tier load balancing
✓ Internal API gateways
✓ Microservices communication
✓ Reduced external attack surface

Best Practice: Plan for high availability
✓ Deploy backends in multiple zones
✓ Configure health checks appropriately
✓ Use connection draining for graceful updates
✓ Test failover scenarios

Best Practice: Optimize for performance
✓ Place load balancer in same region as backends
✓ Use appropriate session affinity
✓ Configure proper traffic distribution
✓ Monitor backend utilization

================================================================================
5. DNS BEST PRACTICES
================================================================================

5.1 Cloud DNS Best Practices
-----------------------------

Best Practice: Use Cloud DNS for authoritative DNS
✓ High availability (100% SLA)
✓ Low latency (global anycast)
✓ Scalable (supports millions of records)
✓ Integrated with GCP services

Best Practice: Organize DNS zones appropriately
✓ One zone per domain/subdomain
✓ Separate zones for different environments
✓ Use private zones for internal resolution
✓ Document zone ownership and purpose

Zone Types:
1. Public Zone
   - Authoritative for public domain
   - Visible on internet
   - Example: example.com

2. Private Zone
   - Internal DNS resolution
   - Visible only to specified VPCs
   - Example: internal.example.com

Best Practice: Configure private DNS zones for VPCs
✓ Use for internal service discovery
✓ Avoid DNS leakage to public internet
✓ Configure for each VPC
✓ Use descriptive naming (internal.gcp.example.com)

Example private zone:
gcloud dns managed-zones create internal-zone \
  --description="Internal DNS zone" \
  --dns-name=internal.example.com \
  --networks=prod-vpc \
  --visibility=private

Best Practice: Use DNS policies for hybrid environments
✓ Forward queries to on-premises DNS
✓ Configure inbound forwarding for on-prem to GCP
✓ Use alternative name servers
✓ Document forwarding rules

Example DNS policy:
gcloud dns policies create on-prem-forwarding \
  --networks=prod-vpc \
  --enable-inbound-forwarding \
  --alternative-name-servers=10.0.0.10,10.0.0.11

Best Practice: Implement DNSSEC
✓ Enable for public zones
✓ Protects against DNS spoofing
✓ Managed by Cloud DNS
✓ Coordinate with domain registrar

gcloud dns managed-zones update example-zone \
  --dnssec-state=on

Best Practice: Monitor DNS health
✓ Track query volume and patterns
✓ Monitor query latency
✓ Alert on resolution failures
✓ Review DNS logs for anomalies

5.2 Service Directory Best Practices
-------------------------------------

Service Directory provides service discovery and registration.

Best Practice: Use Service Directory for microservices
✓ Dynamic service registration
✓ Health checking
✓ Cross-region service discovery
✓ Integration with service mesh

Best Practice: Organize services in namespaces
✓ One namespace per environment or team
✓ Use descriptive names
✓ Document service endpoints
✓ Implement consistent naming conventions

Example Service Directory:
gcloud service-directory namespaces create production \
  --location=us-central1

gcloud service-directory services create api-service \
  --namespace=production \
  --location=us-central1

gcloud service-directory endpoints create api-endpoint-1 \
  --service=api-service \
  --namespace=production \
  --location=us-central1 \
  --address=10.0.1.10 \
  --port=8080

================================================================================
6. NETWORK PERFORMANCE OPTIMIZATION
================================================================================

6.1 Bandwidth and Throughput Best Practices
--------------------------------------------

Best Practice: Understand GCP network tiers
✓ Premium Tier: Google's global network (lower latency, better performance)
✓ Standard Tier: Internet routing (lower cost, regional egress)

Premium vs Standard Tier:
┌────────────────────┬─────────────────┬─────────────────┐
│ Feature            │ Premium Tier    │ Standard Tier   │
├────────────────────┼─────────────────┼─────────────────┤
│ Routing            │ Google network  │ Internet        │
│ Latency            │ Lower           │ Higher          │
│ Performance        │ Better          │ Variable        │
│ Cost               │ Higher          │ Lower           │
│ SLA                │ Higher          │ Lower           │
│ Global LB          │ Yes             │ No              │
└────────────────────┴─────────────────┴─────────────────┘

Best Practice: Use Premium Tier for production workloads
✓ Better performance and reliability
✓ Required for global load balancing
✓ Lower latency for global users
✓ Worth the cost for user-facing applications

Best Practice: Right-size VM network bandwidth
✓ Network bandwidth scales with CPU cores
✓ 2 Gbps per vCPU (up to 32 Gbps for most machine types)
✓ Use higher-core VMs for network-intensive workloads
✓ Consider using compute-optimized or memory-optimized instances

VM Network Performance:
- n1-standard-1 (1 vCPU): 2 Gbps
- n1-standard-4 (4 vCPUs): 8 Gbps
- n1-standard-16 (16 vCPUs): 32 Gbps
- n2-standard-32 (32 vCPUs): 32 Gbps

Best Practice: Use placement policies for low latency
✓ Compact placement: VMs in same physical location
✓ Reduces network latency between VMs
✓ Useful for HPC, databases, real-time applications

gcloud compute resource-policies create group-placement compact-policy \
  --region=us-central1 \
  --collocation=collocated

Best Practice: Enable gVNIC for better performance
✓ Virtual NIC optimized for Google Cloud
✓ Higher throughput and lower latency
✓ Better CPU efficiency
✓ Supported on newer machine types

6.2 Latency Optimization Best Practices
----------------------------------------

Best Practice: Deploy resources close to users
✓ Use Cloud CDN for static content
✓ Deploy compute in regions near users
✓ Use global load balancing for multi-region
✓ Consider edge locations (Cloud CDN PoPs)

Best Practice: Optimize inter-region traffic
✓ Use Premium Tier for lower latency
✓ Consider Private Google Access
✓ Minimize cross-region data transfer
✓ Use regional resources when possible

Best Practice: Reduce DNS lookup time
✓ Use Cloud DNS for low-latency resolution
✓ Configure appropriate TTL values
✓ Use DNS prefetching for web applications
✓ Monitor DNS resolution time

Best Practice: Use packet mirroring for troubleshooting
✓ Analyze network performance issues
✓ Troubleshoot latency problems
✓ Capture traffic for analysis
✓ Be mindful of cost (data processing and storage)

6.3 Egress Cost Optimization
-----------------------------

Best Practice: Minimize egress costs
✓ Use Cloud CDN to cache content
✓ Keep data in same region when possible
✓ Use Standard Tier for non-critical egress
✓ Compress data before egress
✓ Use Private Google Access (no egress charge to Google APIs)

Egress Pricing Tiers (approximate):
- Egress to internet (Premium Tier): $0.12-$0.23/GB
- Egress to internet (Standard Tier): $0.085-$0.12/GB
- Inter-region (same continent): $0.01/GB
- Inter-region (different continent): $0.05-$0.08/GB
- Intra-region: Free
- Google APIs (via Private Google Access): Free

Best Practice: Monitor and analyze egress costs
✓ Enable detailed billing reports
✓ Track egress by service and region
✓ Identify unexpected egress patterns
✓ Set up billing alerts

Best Practice: Architect for cost efficiency
✓ Use regional resources over multi-region when possible
✓ Implement data locality (process data near storage)
✓ Use Cloud CDN for frequently accessed content
✓ Consider Standard Tier for batch processing egress

================================================================================
7. MONITORING AND OBSERVABILITY
================================================================================

7.1 Network Monitoring Best Practices
--------------------------------------

Best Practice: Enable comprehensive network monitoring
✓ VPC Flow Logs for traffic analysis
✓ Firewall rules logging for security
✓ Cloud NAT logging for egress traffic
✓ Load balancer logging for request analysis
✓ Cloud DNS logging for query patterns

Best Practice: Use Network Intelligence Center
✓ Network Topology visualization
✓ Connectivity Tests for troubleshooting
✓ Performance Dashboard for metrics
✓ Firewall Insights for rule optimization
✓ Network Analyzer for configuration issues

Example connectivity test:
gcloud network-management connectivity-tests create web-connectivity-test \
  --source-instance=web-vm \
  --destination-ip-address=10.0.1.10 \
  --destination-port=443 \
  --protocol=TCP

Best Practice: Set up proactive alerts
✓ VPN tunnel down
✓ Cloud NAT port exhaustion
✓ High latency (>100ms threshold)
✓ Packet loss (>1% threshold)
✓ Firewall rule hits (for deny rules)
✓ Unusual egress patterns

Example alerting policy:
gcloud alpha monitoring policies create \
  --notification-channels=CHANNEL_ID \
  --display-name="VPN Tunnel Down" \
  --condition-display-name="VPN Status" \
  --condition-threshold-value=1 \
  --condition-threshold-duration=300s

Best Practice: Implement centralized logging
✓ Export logs to Cloud Logging
✓ Create log sinks for long-term storage
✓ Use BigQuery for log analysis
✓ Set up log-based metrics
✓ Implement log retention policies

Example log sink:
gcloud logging sinks create network-logs-sink \
  storage.googleapis.com/network-logs-bucket \
  --log-filter='resource.type="gce_network"'

7.2 Performance Dashboard Best Practices
-----------------------------------------

Best Practice: Create custom dashboards
✓ Network throughput by region
✓ Latency percentiles (p50, p95, p99)
✓ VPN tunnel status and throughput
✓ Cloud NAT utilization
✓ Load balancer request rates and latency

Best Practice: Monitor key network metrics
✓ VM network sent/received bytes
✓ Load balancer request count and latency
✓ VPN tunnel throughput
✓ Cloud NAT port allocation
✓ Firewall rule hits
✓ Interconnect link utilization

Best Practice: Use packet mirroring for deep analysis
✓ Enable selectively (high cost)
✓ Mirror specific subnets or instances
✓ Send to analysis tools (Wireshark, IDS)
✓ Use for troubleshooting complex issues

================================================================================
8. HIGH AVAILABILITY AND DISASTER RECOVERY
================================================================================

8.1 Multi-Region Architecture Best Practices
---------------------------------------------

Best Practice: Design for regional failure
✓ Deploy critical workloads in multiple regions
✓ Use global load balancing for automatic failover
✓ Replicate data across regions
✓ Test regional failover regularly

Multi-Region Architecture Pattern:
┌────────────────────────────────────────────────────────────────┐
│                   Global Load Balancer                         │
└──────────────────┬─────────────────────────────┬───────────────┘
                   │                             │
         ┌─────────▼────────┐          ┌────────▼──────────┐
         │  us-central1     │          │  europe-west1     │
         │  ┌────────────┐  │          │  ┌────────────┐   │
         │  │ VPC        │  │          │  │ VPC        │   │
         │  │ - Web      │  │          │  │ - Web      │   │
         │  │ - App      │  │          │  │ - App      │   │
         │  │ - DB       │  │          │  │ - DB       │   │
         │  └────────────┘  │          │  └────────────┘   │
         └──────────────────┘          └───────────────────┘
                   │                             │
                   └──────────┬──────────────────┘
                         ┌────▼─────┐
                         │ Cloud    │
                         │ Spanner  │
                         │ (Global) │
                         └──────────┘

Best Practice: Implement health checks and failover
✓ Configure aggressive health checks for fast detection
✓ Use multiple health check types (HTTP + TCP)
✓ Set appropriate thresholds (balance speed vs false positives)
✓ Test failover during off-peak hours

Best Practice: Use managed services for HA
✓ Cloud Spanner for globally distributed database
✓ Cloud SQL with regional replicas
✓ Global load balancing for traffic distribution
✓ Multi-regional Cloud Storage

8.2 Backup and Recovery Best Practices
---------------------------------------

Best Practice: Implement network configuration backups
✓ Export VPC configurations regularly
✓ Version control firewall rules
✓ Document routing configurations
✓ Store in Cloud Storage or version control system

Example configuration export:
# Export firewall rules
gcloud compute firewall-rules list --format=json > firewall-rules-backup.json

# Export routes
gcloud compute routes list --format=json > routes-backup.json

Best Practice: Document disaster recovery procedures
✓ Network failover runbook
✓ VPN/Interconnect recovery steps
✓ DNS failover procedures
✓ Contact information for network team
✓ Recovery time objectives (RTO) and recovery point objectives (RPO)

8.3 Network Resilience Best Practices
--------------------------------------

Best Practice: Implement redundancy at all layers
✓ Multiple VPN tunnels (HA VPN)
✓ Redundant Cloud Interconnect connections
✓ Multiple Cloud Routers
✓ Multi-zone deployments
✓ Global load balancing

Best Practice: Use Cloud CDN for origin protection
✓ Reduces load on origin servers
✓ Absorbs traffic spikes
✓ Provides DDoS protection
✓ Improves availability during incidents

Best Practice: Implement graceful degradation
✓ Fallback to regional routing if global fails
✓ Static content from CDN if origin down
✓ Queue requests during outages
✓ Circuit breaker patterns for microservices

================================================================================
9. COMPLIANCE AND GOVERNANCE
================================================================================

9.1 Network Compliance Best Practices
--------------------------------------

Best Practice: Implement network segmentation for compliance
✓ Separate VPCs for different compliance zones
✓ Use Shared VPC for centralized control
✓ Implement VPC Service Controls for data perimeter
✓ Document network architecture for audits

Compliance Zone Architecture:
┌────────────────────────────────────────────────────────────────┐
│                     Organization                               │
│                                                                │
│  ┌──────────────────┐  ┌──────────────────┐  ┌──────────────┐│
│  │ PCI-DSS VPC      │  │ HIPAA VPC        │  │ General VPC  ││
│  │ - Cardholder     │  │ - PHI data       │  │ - Public web ││
│  │   environment    │  │ - Healthcare apps│  │ - Non-       ││
│  │ - Isolated       │  │ - Isolated       │  │   sensitive  ││
│  └──────────────────┘  └──────────────────┘  └──────────────┘│
└────────────────────────────────────────────────────────────────┘

Best Practice: Enable audit logging
✓ Admin Activity logs (always on)
✓ Data Access logs (for compliance requirements)
✓ System Event logs
✓ Policy Denied logs
✓ Export to long-term storage

Best Practice: Implement least privilege access
✓ Use IAM roles for network administration
✓ Separate duties (network admin vs security admin)
✓ Regular access reviews
✓ Service accounts for automation

Best Practice: Document network controls
✓ Network architecture diagrams
✓ Data flow diagrams
✓ Firewall rule documentation
✓ Change management procedures
✓ Compliance mappings (controls to requirements)

9.2 Network Policy Enforcement
-------------------------------

Best Practice: Use Organization Policies
✓ Restrict external IPs (compute.vmExternalIpAccess)
✓ Restrict VPC peering (compute.restrictVpcPeering)
✓ Require VPC Flow Logs (compute.requireVpcFlowLogs)
✓ Restrict shared VPC host projects

Example organization policy:
gcloud resource-manager org-policies set-policy \
  --organization=ORGANIZATION_ID \
  policy.yaml

# policy.yaml
constraint: compute.vmExternalIpAccess
listPolicy:
  deniedValues:
    - "*"

Best Practice: Implement network tagging strategy
✓ Tag resources by environment (prod, dev, test)
✓ Tag by compliance zone (pci, hipaa, general)
✓ Tag by cost center or team
✓ Use labels for reporting and automation

Best Practice: Regular compliance audits
✓ Quarterly network security reviews
✓ Firewall rule effectiveness analysis
✓ Access control reviews
✓ Network segmentation validation
✓ Third-party security assessments

================================================================================
10. OPERATIONAL EXCELLENCE
================================================================================

10.1 Infrastructure as Code Best Practices
-------------------------------------------

Best Practice: Use Terraform for network provisioning
✓ Version-controlled network configurations
✓ Repeatable deployments
✓ Consistent environments (dev/staging/prod)
✓ Automated testing of network changes

Example Terraform VPC:
resource "google_compute_network" "vpc_network" {
  name                    = "prod-vpc"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "subnet" {
  name          = "prod-subnet-us-central1"
  ip_cidr_range = "10.0.1.0/24"
  region        = "us-central1"
  network       = google_compute_network.vpc_network.id

  log_config {
    aggregation_interval = "INTERVAL_5_SEC"
    flow_sampling        = 0.1
    metadata             = "INCLUDE_ALL_METADATA"
  }

  private_ip_google_access = true
}

Best Practice: Implement CI/CD for network changes
✓ Automated validation of configurations
✓ Plan/apply workflow for changes
✓ Rollback procedures
✓ Approval gates for production

Best Practice: Use Cloud Deployment Manager (alternative)
✓ Google's native IaC tool
✓ YAML or Python templates
✓ Integrated with GCP
✓ Supports references and dependencies

10.2 Change Management Best Practices
--------------------------------------

Best Practice: Implement structured change process
✓ Document proposed changes
✓ Risk assessment
✓ Testing in non-production
✓ Scheduled maintenance windows
✓ Rollback plan

Change Management Workflow:
1. Request → 2. Review → 3. Approve → 4. Test → 5. Implement → 6. Verify

Best Practice: Use maintenance windows
✓ Schedule changes during low-traffic periods
✓ Communicate to stakeholders
✓ Have on-call engineers available
✓ Monitor during and after changes

Best Practice: Implement gradual rollout
✓ Test in dev/staging first
✓ Deploy to single region before global
✓ Use canary deployments for critical changes
✓ Monitor metrics during rollout

10.3 Documentation Best Practices
----------------------------------

Best Practice: Maintain comprehensive documentation
✓ Network architecture diagrams (updated quarterly)
✓ IP address allocation (IPAM)
✓ Firewall rule inventory
✓ Routing documentation
✓ Runbooks for common tasks
✓ Troubleshooting guides

Best Practice: Document network topology
✓ Use tools like lucidchart or draw.io
✓ Show VPCs, subnets, interconnects
✓ Include IP ranges and routes
✓ Highlight redundancy and failover paths
✓ Version control diagrams

Best Practice: Create operational runbooks
✓ VPN tunnel troubleshooting
✓ Firewall rule creation process
✓ Network incident response
✓ Performance troubleshooting
✓ Disaster recovery procedures

10.4 Automation Best Practices
-------------------------------

Best Practice: Automate repetitive tasks
✓ Firewall rule provisioning
✓ Subnet creation and expansion
✓ VPN tunnel configuration
✓ Network monitoring setup
✓ Compliance checking

Best Practice: Use Cloud Functions for automation
✓ Auto-remediation of network issues
✓ Automated alerting and notifications
✓ Configuration drift detection
✓ Cost optimization (e.g., delete unused IPs)

Example Cloud Function for unused IP cleanup:
def cleanup_unused_ips(event, context):
    """Remove unused external IPs older than 30 days"""
    # Implementation here
    pass

Best Practice: Implement self-service portals
✓ Allow developers to request network resources
✓ Automated provisioning with guardrails
✓ Approval workflows for production
✓ Integration with ITSM tools

================================================================================
REFERENCES AND DOCUMENTATION
================================================================================

1. Official Google Cloud Networking Documentation
   - VPC Network Overview
     https://cloud.google.com/vpc/docs/vpc
   - Best Practices for VPC Design
     https://cloud.google.com/solutions/best-practices-vpc-design
   - Cloud Interconnect Documentation
     https://cloud.google.com/network-connectivity/docs/interconnect
   - Cloud VPN Documentation
     https://cloud.google.com/network-connectivity/docs/vpn

2. Google Cloud Architecture Framework
   - Networking Best Practices
     https://cloud.google.com/architecture/framework/networking
   - Security Best Practices
     https://cloud.google.com/architecture/framework/security
   - Reliability Best Practices
     https://cloud.google.com/architecture/framework/reliability

3. Google Cloud Whitepapers
   - "Google Cloud Network Architecture"
   - "Hybrid Connectivity Reference Architectures"
   - "VPC Service Controls Deep Dive"
   - "Cloud Load Balancing Architecture"

4. Google Cloud Solutions
   - Hub-and-Spoke Network Architecture
     https://cloud.google.com/architecture/hub-and-spoke-network-architecture
   - Multi-Region Networking
     https://cloud.google.com/solutions/multi-region-networking
   - Building Secure Networks
     https://cloud.google.com/solutions/building-secure-networks

5. Networking Blog Posts and Articles
   - Google Cloud Blog - Networking category
     https://cloud.google.com/blog/products/networking
   - Packet Pushers - GCP Networking
   - Medium - Google Cloud Networking articles

6. Books
   - "Google Cloud Platform for Architects" by Vitthal Srinivasan
   - "Google Cloud Platform in Action" by JJ Geewax (Manning, 2018)
   - "Professional Cloud Network Engineer Study Guide" (Sybex)

7. Training and Certification
   - Google Cloud Professional Cloud Network Engineer Certification
     https://cloud.google.com/certification/cloud-network-engineer
   - Coursera: Networking in Google Cloud
   - Pluralsight: GCP Networking courses
   - A Cloud Guru: GCP Networking learning paths

8. Compliance and Security Resources
   - GCP Compliance Resource Center
     https://cloud.google.com/security/compliance
   - VPC Service Controls Documentation
     https://cloud.google.com/vpc-service-controls/docs
   - Security Command Center
     https://cloud.google.com/security-command-center

9. Monitoring and Operations
   - Cloud Monitoring Documentation
     https://cloud.google.com/monitoring/docs
   - Network Intelligence Center
     https://cloud.google.com/network-intelligence-center
   - Cloud Logging Documentation
     https://cloud.google.com/logging/docs

10. Community Resources
    - Google Cloud Community
      https://www.googlecloudcommunity.com/
    - Reddit: r/googlecloud
    - Stack Overflow: google-cloud-platform tag
    - Google Cloud Slack community

11. Tools and Utilities
    - gcloud CLI Reference
      https://cloud.google.com/sdk/gcloud/reference
    - Terraform Google Provider
      https://registry.terraform.io/providers/hashicorp/google/latest
    - Cloud Foundation Toolkit
      https://cloud.google.com/foundation-toolkit

12. Network Performance Resources
    - GCP Network Tier Documentation
      https://cloud.google.com/network-tiers
    - Cloud CDN Best Practices
      https://cloud.google.com/cdn/docs/best-practices
    - Performance Testing Tools (PerfKit Benchmarker)

================================================================================
GCP NETWORKING CHECKLIST
================================================================================

☐ VPC Design
  ☐ Use Custom Mode VPC for production
  ☐ Plan IP addressing (avoid overlaps with on-premises)
  ☐ Document IP allocation in IPAM
  ☐ Enable Private Google Access on subnets
  ☐ Enable VPC Flow Logs selectively
  ☐ Use Shared VPC for multi-project organizations
  ☐ Plan for subnet expansion

☐ Hybrid Connectivity
  ☐ Use HA VPN for production workloads
  ☐ Configure redundant VPN tunnels
  ☐ Enable BGP for dynamic routing
  ☐ Configure BFD for fast failure detection
  ☐ Use Dedicated or Partner Interconnect for high bandwidth
  ☐ Implement redundant Interconnect topology
  ☐ Document failover procedures

☐ Security
  ☐ Implement firewall rules with least privilege
  ☐ Use service accounts over tags for firewall targets
  ☐ Enable firewall logging for critical rules
  ☐ Configure Cloud NAT for private VMs
  ☐ Enable Cloud Armor for external services
  ☐ Implement VPC Service Controls for sensitive data
  ☐ Use Private Google Access
  ☐ Enable DNSSEC for public zones

☐ Load Balancing
  ☐ Choose appropriate load balancer type
  ☐ Configure health checks properly
  ☐ Use global load balancing for multi-region
  ☐ Enable Cloud CDN for static content
  ☐ Implement SSL/TLS best practices
  ☐ Configure appropriate timeout values

☐ DNS
  ☐ Use Cloud DNS for authoritative DNS
  ☐ Configure private zones for internal resolution
  ☐ Implement DNS policies for hybrid environments
  ☐ Enable DNSSEC for public zones
  ☐ Monitor DNS query patterns

☐ Performance
  ☐ Use Premium Tier for production workloads
  ☐ Right-size VMs for network bandwidth needs
  ☐ Deploy resources close to users
  ☐ Use Cloud CDN to reduce latency
  ☐ Enable gVNIC for better performance
  ☐ Monitor and optimize egress costs

☐ Monitoring
  ☐ Enable VPC Flow Logs
  ☐ Configure Cloud Monitoring dashboards
  ☐ Set up proactive alerts (VPN, NAT, latency)
  ☐ Use Network Intelligence Center
  ☐ Implement centralized logging
  ☐ Export logs for long-term retention

☐ High Availability
  ☐ Deploy critical workloads in multiple regions
  ☐ Use global load balancing for automatic failover
  ☐ Implement health checks and failover
  ☐ Test regional failover regularly
  ☐ Document disaster recovery procedures
  ☐ Use managed services for HA

☐ Compliance
  ☐ Implement network segmentation
  ☐ Enable audit logging
  ☐ Use Organization Policies for governance
  ☐ Document network architecture
  ☐ Regular compliance audits
  ☐ Implement least privilege access

☐ Operational Excellence
  ☐ Use Infrastructure as Code (Terraform)
  ☐ Implement CI/CD for network changes
  ☐ Maintain comprehensive documentation
  ☐ Create operational runbooks
  ☐ Implement change management process
  ☐ Automate repetitive tasks
  ☐ Regular security and cost reviews

☐ Cost Optimization
  ☐ Monitor egress costs
  ☐ Use Standard Tier where appropriate
  ☐ Clean up unused resources (IPs, routes)
  ☐ Use Cloud CDN to reduce egress
  ☐ Implement data locality
  ☐ Set up billing alerts

================================================================================
END OF DOCUMENT
================================================================================
