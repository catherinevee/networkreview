================================================================================
                    HOW VXLAN (VIRTUAL EXTENSIBLE LAN) WORKS
================================================================================

VXLAN is a network virtualization technology that encapsulates Layer 2 Ethernet
frames in Layer 4 UDP packets, enabling the creation of virtualized Layer 2
networks over existing Layer 3 infrastructure. It addresses VLAN scalability
limitations and supports multi-tenant cloud environments.

================================================================================
1. VXLAN FUNDAMENTALS
================================================================================

1.1 What is VXLAN?
------------------
- Virtual eXtensible Local Area Network (VXLAN) is an overlay network
  encapsulation protocol defined in RFC 7348
- Extends Layer 2 segments over Layer 3 networks
- Uses MAC-in-UDP encapsulation
- Provides network segmentation similar to VLANs but with greater scale
- Primarily used in data center environments for multi-tenancy

1.2 Why VXLAN Was Created
--------------------------
Traditional VLAN Limitations:
- 4,096 VLAN limit (12-bit VLAN ID) - insufficient for large cloud providers
- Spanning Tree Protocol limitations in large Layer 2 domains
- Limited geographic reach (Layer 2 typically confined to single data center)
- Lack of multi-path forwarding (STP blocks redundant links)

VXLAN Solutions:
- 16 million network segments (24-bit VNI)
- Layer 3 underlay enables geographic extension
- ECMP load balancing across multiple paths
- Eliminates Spanning Tree in the overlay

1.3 VXLAN vs VLAN Comparison
-----------------------------
┌────────────────────┬──────────────────┬──────────────────────────┐
│ Feature            │ VLAN (802.1Q)    │ VXLAN                    │
├────────────────────┼──────────────────┼──────────────────────────┤
│ Segment ID Size    │ 12 bits (4K)     │ 24 bits (16M)            │
│ Encapsulation      │ 802.1Q tag       │ MAC-in-UDP               │
│ Layer              │ Layer 2          │ Layer 3 overlay          │
│ Geographic Reach   │ Limited (L2)     │ Unlimited (routed)       │
│ Multi-path         │ No (STP)         │ Yes (ECMP)               │
│ Overhead           │ 4 bytes          │ 50 bytes                 │
└────────────────────┴──────────────────┴──────────────────────────┘

================================================================================
2. VXLAN PACKET STRUCTURE
================================================================================

2.1 VXLAN Encapsulation
------------------------
Original Ethernet Frame:
┌──────────────────────────────────────────────────────────────┐
│ Original Ethernet Header │ IP Header │ TCP/UDP │ Data │ FCS │
└──────────────────────────────────────────────────────────────┘

VXLAN Encapsulated Packet:
┌───────────────────────────────────────────────────────────────────────────┐
│ Outer Ethernet │ Outer IP │ Outer UDP │ VXLAN │ Original Ethernet Frame  │
│ Header         │ Header   │ Header    │ Header│ (Inner Frame)            │
└───────────────────────────────────────────────────────────────────────────┘
     14 bytes      20 bytes    8 bytes   8 bytes      Original frame

Total Overhead: 50 bytes (14 + 20 + 8 + 8)
Note: Add 20 more bytes if using IPv6 underlay (total 70 bytes)

2.2 VXLAN Header Format (8 bytes)
----------------------------------
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
┌─┬─┬─┬─┬─┬─┬─┬─┬───────────────────────────────────────────────┐
│R│R│R│R│I│R│R│R│         Reserved (24 bits)                    │
├─┴─┴─┴─┴─┴─┴─┴─┼───────────────────────────────────────────────┤
│               VXLAN Network Identifier (VNI) - 24 bits        │R│
├───────────────────────────────────────────────────────────────┴─┤
│                    Reserved (8 bits)                            │
└─────────────────────────────────────────────────────────────────┘

Fields:
- Flags (8 bits): Bit 4 (I flag) set to 1 indicates valid VNI
- Reserved: Set to 0
- VNI (24 bits): VXLAN Network Identifier (0 to 16,777,215)
- Reserved: Set to 0

2.3 Outer Headers
-----------------
Outer Ethernet Header:
- Destination MAC: Next-hop MAC (VTEP or router)
- Source MAC: Local VTEP MAC
- EtherType: 0x0800 (IPv4) or 0x86DD (IPv6)

Outer IP Header:
- Source IP: Local VTEP IP (loopback or physical interface)
- Destination IP: Remote VTEP IP or multicast group
- Protocol: 17 (UDP)
- TTL: Typically set to allow routing across underlay

Outer UDP Header:
- Source Port: Typically hashed from inner frame (for ECMP)
- Destination Port: 4789 (IANA assigned VXLAN port)
  Note: Some vendors used 8472 before IANA assignment
- Checksum: May be 0 (not calculated)

================================================================================
3. VXLAN COMPONENTS
================================================================================

3.1 VXLAN Tunnel Endpoint (VTEP)
---------------------------------
- VTEP: Device that performs VXLAN encapsulation/decapsulation
- Can be physical switch, router, hypervisor, or NIC
- Has IP address on underlay network (VTEP IP)
- Maintains mapping of VNI to VLAN and MAC addresses to remote VTEPs

VTEP Types:
1. Hardware VTEP: Physical switch (Cisco Nexus, Arista, Juniper QFX)
2. Software VTEP: Hypervisor (VMware NSX, Linux kernel, Open vSwitch)
3. NIC VTEP: SmartNIC with VXLAN offload (Intel, Mellanox)

3.2 VXLAN Network Identifier (VNI)
-----------------------------------
- 24-bit identifier (similar to VLAN ID but larger)
- Identifies the VXLAN segment (virtual L2 domain)
- Range: 0 to 16,777,215 (16 million possible segments)
- Also called VXLAN Segment ID or VNI

VNI Scope:
- Locally significant: Different sites can reuse same VNI
- Or globally significant: VNI uniquely identifies tenant across DCs

3.3 Underlay Network
---------------------
- Physical IP network that carries VXLAN traffic
- Provides connectivity between VTEPs
- Uses standard IP routing protocols (OSPF, BGP, IS-IS)
- Should support large MTU (1600+ to avoid fragmentation)
- ECMP provides load balancing

Requirements:
- IP reachability between all VTEPs
- UDP port 4789 allowed in firewalls/ACLs
- Sufficient bandwidth for encapsulated traffic
- MTU planning (add 50-70 bytes for VXLAN overhead)

3.4 Overlay Network
--------------------
- Virtual Layer 2 network created by VXLAN
- Logical network seen by endpoints (VMs, containers, hosts)
- Isolated per VNI
- Can span multiple physical locations

================================================================================
4. HOW VXLAN FORWARDING WORKS
================================================================================

4.1 VXLAN Encapsulation Process (Egress)
-----------------------------------------
Step 1: Host sends standard Ethernet frame
- Source MAC: Host1 MAC
- Destination MAC: Host2 MAC (or unknown if learning)
- VLAN tag may be present (stripped by VTEP)

Step 2: VTEP receives frame on access port
- Identifies VNI based on port/VLAN mapping
- Looks up destination MAC in forwarding table

Step 3: VTEP performs MAC lookup
- If MAC known: Unicast to specific remote VTEP
- If MAC unknown: Flood to all VTEPs in VNI (multicast or head-end replication)
- If MAC is multicast/broadcast: Flood to all VTEPs

Step 4: VTEP encapsulates frame
- Adds VXLAN header (8 bytes) with VNI
- Adds UDP header (destination port 4789)
- Adds IP header (source = local VTEP, dest = remote VTEP)
- Adds Ethernet header (for underlay)

Step 5: Packet sent to underlay
- Routed through IP network using standard routing
- Can take multiple ECMP paths (based on UDP source port hash)

4.2 VXLAN Decapsulation Process (Ingress)
------------------------------------------
Step 1: Remote VTEP receives UDP packet on port 4789
- Validates VXLAN header (I flag set)
- Extracts VNI from VXLAN header

Step 2: VTEP decapsulates packet
- Removes outer Ethernet, IP, UDP headers
- Removes VXLAN header
- Extracts original inner frame

Step 3: MAC learning
- Learns source MAC to remote VTEP IP mapping
- Stores in forwarding table for future unicast

Step 4: Forward original frame
- Looks up destination MAC in local table
- Forwards to local access port(s) based on VNI
- May add VLAN tag if access port expects it

4.3 Forwarding Example: VM1 to VM2
-----------------------------------
Topology:
[VM1] --- [VTEP1] === IP Network === [VTEP2] --- [VM2]
 VLAN 10      ↑                           ↑      VLAN 10
              10.1.1.1                 10.2.2.2
              VNI 5000                 VNI 5000

Step-by-step:
1. VM1 (192.168.1.10) sends frame to VM2 (192.168.1.20)
   - Inner Src MAC: VM1-MAC
   - Inner Dst MAC: VM2-MAC (or gateway if unknown)

2. VTEP1 receives frame on VLAN 10 access port
   - Maps VLAN 10 → VNI 5000
   - Looks up VM2-MAC in MAC table for VNI 5000

3. If MAC known (learned previously):
   - Unicast to VTEP2 (10.2.2.2)
   - Outer Src IP: 10.1.1.1
   - Outer Dst IP: 10.2.2.2
   - UDP Src Port: Hash(VM1-MAC, VM2-MAC, ...) = 52345
   - UDP Dst Port: 4789
   - VNI: 5000

4. Packet routed through IP network
   - Standard IP routing (may use ECMP)
   - Multiple paths possible due to UDP source port variation

5. VTEP2 receives packet on UDP 4789
   - Decapsulates VXLAN
   - Learns VM1-MAC → VTEP1 (10.1.1.1) for VNI 5000
   - Forwards original frame to VM2 on VLAN 10 port

6. VM2 receives original Ethernet frame
   - No knowledge of VXLAN encapsulation
   - Sees standard Layer 2 communication

================================================================================
5. VXLAN CONTROL PLANE OPTIONS
================================================================================

5.1 Multicast-Based VXLAN (Original Method)
--------------------------------------------
- Uses IP multicast for BUM traffic (Broadcast, Unknown unicast, Multicast)
- Each VNI mapped to multicast group
- VTEPs join multicast groups for their VNIs using IGMP/PIM

Advantages:
- Simple configuration
- Efficient flooding (only to interested VTEPs)
- No controller required

Disadvantages:
- Requires multicast in underlay (PIM, IGMP)
- Many networks don't support multicast
- Multicast group scalability limits
- Complex troubleshooting

Configuration example (Cisco):
interface nve1
  source-interface loopback0
  member vni 5000
    mcast-group 239.1.1.1

5.2 Head-End Replication (Ingress Replication)
-----------------------------------------------
- VTEP replicates BUM traffic to each remote VTEP individually
- Uses unicast for all traffic (no multicast required)
- VTEP maintains list of remote VTEPs per VNI

Advantages:
- No multicast required in underlay
- Simpler underlay network
- Works in any IP network

Disadvantages:
- Inefficient for large VNI (N-1 copies per BUM frame)
- High CPU usage on source VTEP
- Increased bandwidth consumption

Configuration example (Cisco):
interface nve1
  source-interface loopback0
  member vni 5000 ingress-replication

5.3 EVPN Control Plane (Modern Approach)
-----------------------------------------
- RFC 7432: BGP MPLS-Based Ethernet VPN (EVPN)
- RFC 8365: EVPN Overlay for VXLAN
- Uses MP-BGP to distribute MAC/IP information
- Eliminates data-plane learning

EVPN Route Types for VXLAN:
- Type 2: MAC/IP Advertisement Route
- Type 3: Inclusive Multicast Ethernet Tag Route
- Type 5: IP Prefix Route (for routing between VNIs)

Advantages:
- Control-plane MAC/IP learning (not data-plane flooding)
- Faster convergence
- Support for active-active multihoming
- Integrated routing and bridging (IRB)
- Better for large-scale deployments

Disadvantages:
- More complex configuration
- Requires BGP knowledge
- May need route reflectors for scale

EVPN Benefits:
✓ Eliminates unknown unicast flooding
✓ Host mobility (MAC move detection)
✓ ARP suppression (reduces broadcast)
✓ Silent host detection
✓ Integrated L2 and L3 forwarding

5.4 Controller-Based (SDN)
---------------------------
- Centralized controller programs VTEP forwarding tables
- Controller learns MAC addresses and distributes to VTEPs
- Examples: VMware NSX, Cisco ACI, Juniper Contrail

Advantages:
- Centralized visibility and control
- Policy-based automation
- Easier troubleshooting
- Integration with orchestration (OpenStack, Kubernetes)

Disadvantages:
- Controller is critical component (requires HA)
- Vendor-specific solutions
- Additional complexity

================================================================================
6. MAC ADDRESS LEARNING IN VXLAN
================================================================================

6.1 Data-Plane Learning (Traditional)
--------------------------------------
Learning Process:
1. VTEP receives encapsulated packet from remote VTEP
2. Inspects inner source MAC address
3. Creates entry: Inner-Src-MAC → Outer-Src-IP (remote VTEP)
4. Stores in forwarding table for VNI

Aging:
- Entries age out after timeout (typically 300 seconds)
- Must be refreshed by traffic from host

Issues:
- Requires unknown unicast flooding initially
- Slow convergence for host moves
- Susceptible to MAC table exhaustion attacks

6.2 Control-Plane Learning (EVPN)
----------------------------------
Learning Process:
1. VTEP learns MAC from local hosts (data plane)
2. Advertises MAC/IP via BGP EVPN Type 2 route
3. Remote VTEPs receive BGP route and populate forwarding table
4. No flooding required for known hosts

Advantages:
- Proactive learning (before traffic sent)
- Fast convergence (BGP propagation)
- Reduced flooding
- Sequence numbers prevent loops during VM migration

6.3 ARP Suppression
--------------------
- VTEP maintains ARP cache for local hosts
- When ARP request received, VTEP responds locally
- Reduces ARP broadcast across overlay

How it works:
1. Host sends ARP request (broadcast)
2. VTEP intercepts ARP request
3. If VTEP knows IP-to-MAC mapping (from EVPN), responds directly
4. If unknown, floods to other VTEPs (or drops if configured)

Benefits:
- Reduces broadcast traffic in overlay
- Faster ARP resolution
- Reduces load on hosts/servers

Configuration (Cisco NX-OS):
interface nve1
  member vni 5000
    suppress-arp

================================================================================
7. VXLAN ROUTING (INTER-VXLAN COMMUNICATION)
================================================================================

7.1 Symmetric vs Asymmetric IRB
--------------------------------
IRB = Integrated Routing and Bridging (routing between VXLANs)

Asymmetric IRB:
- Routing performed at ingress VTEP
- Return traffic takes different path than forward traffic
- Both VNIs must exist on both VTEPs

Flow: VM1 (VNI 5000) → VTEP1 (routes) → VTEP2 (bridges) → VM2 (VNI 6000)
Return: VM2 (VNI 6000) → VTEP2 (routes) → VTEP1 (bridges) → VM1 (VNI 5000)

Disadvantages:
- All VNIs must be configured on all VTEPs
- Doesn't scale well
- Complex configuration

Symmetric IRB (Preferred):
- Uses Layer 3 VNI (L3VNI) for routing
- Routing performed at both ingress and egress
- Symmetric path for forward and return traffic

Flow: VM1 (VNI 5000) → VTEP1 (routes to L3VNI) → VTEP2 (routes from L3VNI) → VM2 (VNI 6000)
Return: VM2 (VNI 6000) → VTEP2 (routes to L3VNI) → VTEP1 (routes from L3VNI) → VM1 (VNI 5000)

Advantages:
- VNIs only needed where endpoints exist
- Scales better
- Cleaner design

7.2 Layer 3 VNI (L3VNI)
------------------------
- Special VNI used for routing (not bridging)
- Associated with VRF (Virtual Routing and Forwarding)
- Provides tenant isolation at Layer 3
- Used in symmetric IRB

Configuration (Cisco NX-OS):
vrf context TENANT-A
  vni 50000
  rd auto
  address-family ipv4 unicast
    route-target both auto
    route-target both auto evpn

7.3 Distributed Anycast Gateway
--------------------------------
- Same gateway IP/MAC configured on multiple VTEPs
- Provides active-active default gateway
- Enables local routing (optimal traffic flow)

Benefits:
- Optimal routing (no hairpinning)
- Load distribution
- Fast failover (no FHRP needed)

Configuration (Cisco NX-OS):
fabric forwarding anycast-gateway-mac 0000.2222.3333
interface Vlan10
  no shutdown
  vrf member TENANT-A
  ip address 192.168.10.1/24
  fabric forwarding mode anycast-gateway

================================================================================
8. VXLAN WITH EVPN (VXLAN-EVPN)
================================================================================

8.1 EVPN Overview
-----------------
- Originally designed for MPLS (RFC 7432)
- Extended for VXLAN in RFC 8365
- Uses MP-BGP for MAC/IP distribution
- Industry standard for VXLAN control plane

8.2 EVPN Route Types for VXLAN
-------------------------------
Type 1: Ethernet Auto-Discovery (A-D) Route
- Used for multihoming (ESI)
- Fast convergence for link failures

Type 2: MAC/IP Advertisement Route
- Advertises host MAC and IP addresses
- Includes VNI (VXLAN Network Identifier)
- Most important route type for VXLAN

Type 3: Inclusive Multicast Ethernet Tag Route
- Advertises VTEP membership in VNI
- Used for BUM traffic distribution
- Contains VTEP IP address

Type 4: Ethernet Segment Route
- Used for multihoming scenarios
- Advertises Ethernet Segment Identifier (ESI)

Type 5: IP Prefix Route
- Advertises IP prefixes (subnets)
- Used for inter-VXLAN routing
- Enables route summarization

8.3 EVPN Type 2 Route Structure
--------------------------------
Route Distinguisher: Uniquely identifies route source
Route Targets: Import/export for VRF filtering
MAC Address: 48-bit MAC address
IP Address: IPv4 or IPv6 address (optional)
VNI: VXLAN Network Identifier
VTEP IP: Next hop for reaching MAC

8.4 EVPN Benefits for VXLAN
----------------------------
✓ Control-plane MAC learning (eliminates flooding)
✓ ARP/ND suppression (reduces broadcast)
✓ Host mobility (MAC/IP move detection with sequence numbers)
✓ Multihoming support (active-active per VNI)
✓ Integrated L2 and L3 (symmetric IRB)
✓ Fast convergence (BGP-based)
✓ Scalability (route filtering with RT)

================================================================================
9. VXLAN MTU CONSIDERATIONS
================================================================================

9.1 MTU Overhead
----------------
Standard Ethernet Frame: 1518 bytes (including FCS)
VXLAN Overhead: 50 bytes (IPv4 underlay)

Breakdown:
- Outer Ethernet Header: 14 bytes
- Outer IPv4 Header: 20 bytes (40 bytes for IPv6)
- Outer UDP Header: 8 bytes
- VXLAN Header: 8 bytes
Total: 50 bytes (70 bytes with IPv6)

Required MTU = Original MTU + VXLAN Overhead
For 1500-byte payload: 1500 + 50 = 1550 bytes minimum

9.2 MTU Configuration Strategies
---------------------------------
Option 1: Increase Underlay MTU (Recommended)
- Configure 9000+ byte jumbo frames in underlay
- Accommodates VXLAN overhead without fragmentation
- Best performance

Option 2: Reduce Overlay MTU
- Configure smaller MTU on VM interfaces (1450 bytes)
- VXLAN overhead stays within 1500-byte underlay MTU
- May require application changes

Option 3: Allow Fragmentation (Not Recommended)
- Let IP fragment oversized packets
- Significant performance penalty
- Should be avoided

Best Practice:
Configure minimum 1600-byte MTU in underlay (9000 preferred)

Verification (Cisco):
show interface ethernet 1/1 | include MTU

Configuration (Cisco NX-OS):
interface Ethernet1/1
  mtu 9216

================================================================================
10. VXLAN CONFIGURATION EXAMPLES
================================================================================

10.1 Cisco Nexus 9000 - Flood-and-Learn VXLAN
----------------------------------------------
# Enable features
feature nv overlay
feature vn-segment-vlan-based

# Configure VTEP source interface
interface loopback0
  ip address 10.1.1.1/32
  ip address 10.1.1.100/32 secondary  ! Anycast VTEP (optional)

# Create VLAN and map to VNI
vlan 10
  vn-segment 5000

# Configure NVE interface
interface nve1
  no shutdown
  source-interface loopback0
  member vni 5000
    ingress-replication protocol static
      peer-ip 10.2.2.2
      peer-ip 10.3.3.3

# Configure access port
interface Ethernet1/1
  switchport mode access
  switchport access vlan 10

10.2 Cisco Nexus 9000 - VXLAN with EVPN
----------------------------------------
# Enable features
feature nv overlay
feature vn-segment-vlan-based
feature bgp
feature fabric forwarding

# Configure anycast gateway MAC
fabric forwarding anycast-gateway-mac 0001.0001.0001

# Create VRF for tenant
vrf context TENANT-A
  vni 50000
  rd auto
  address-family ipv4 unicast
    route-target both auto
    route-target both auto evpn

# Configure VLANs and VNIs
vlan 10
  vn-segment 5000
vlan 20
  vn-segment 6000

# Configure SVIs for L3
interface Vlan10
  no shutdown
  vrf member TENANT-A
  ip address 192.168.10.1/24
  fabric forwarding mode anycast-gateway

interface Vlan20
  no shutdown
  vrf member TENANT-A
  ip address 192.168.20.1/24
  fabric forwarding mode anycast-gateway

# Configure NVE interface
interface nve1
  no shutdown
  source-interface loopback0
  host-reachability protocol bgp
  member vni 5000
    suppress-arp
    ingress-replication protocol bgp
  member vni 6000
    suppress-arp
    ingress-replication protocol bgp
  member vni 50000 associate-vrf

# Configure BGP for EVPN
router bgp 65001
  router-id 10.1.1.1
  neighbor 10.100.100.1
    remote-as 65001
    update-source loopback0
    address-family l2vpn evpn
      send-community extended
  vrf TENANT-A
    address-family ipv4 unicast
      advertise l2vpn evpn

# Configure underlay routing (OSPF example)
router ospf UNDERLAY
  router-id 10.1.1.1
interface loopback0
  ip router ospf UNDERLAY area 0.0.0.0
interface Ethernet1/49
  ip address 10.0.0.1/30
  ip router ospf UNDERLAY area 0.0.0.0

10.3 Arista EOS - VXLAN with EVPN
----------------------------------
# Configure VTEP interface
interface Loopback0
   ip address 10.1.1.1/32

interface Loopback1
   ip address 10.1.1.100/32  ! Anycast VTEP

# Configure VLANs
vlan 10
   name VXLAN-10
vlan 20
   name VXLAN-20

# Configure VXLAN interface
interface Vxlan1
   vxlan source-interface Loopback1
   vxlan udp-port 4789
   vxlan vlan 10 vni 5000
   vxlan vlan 20 vni 6000
   vxlan vrf TENANT-A vni 50000

# Configure VRF
vrf instance TENANT-A
ip routing vrf TENANT-A

# Configure anycast gateway
ip virtual-router mac-address 00:1c:73:00:00:01

interface Vlan10
   vrf TENANT-A
   ip address virtual 192.168.10.1/24

interface Vlan20
   vrf TENANT-A
   ip address virtual 192.168.20.1/24

# Configure BGP for EVPN
router bgp 65001
   router-id 10.1.1.1
   neighbor EVPN-SPINE peer group
   neighbor EVPN-SPINE remote-as 65000
   neighbor EVPN-SPINE update-source Loopback0
   neighbor EVPN-SPINE ebgp-multihop 3
   neighbor EVPN-SPINE send-community extended
   neighbor 10.100.100.1 peer group EVPN-SPINE
   !
   vlan 10
      rd 10.1.1.1:5000
      route-target both 1:5000
      redistribute learned
   vlan 20
      rd 10.1.1.1:6000
      route-target both 1:6000
      redistribute learned
   !
   address-family evpn
      neighbor EVPN-SPINE activate
   !
   vrf TENANT-A
      rd 10.1.1.1:50000
      route-target import evpn 1:50000
      route-target export evpn 1:50000
      redistribute connected

10.4 Juniper QFX - VXLAN with EVPN
-----------------------------------
# Configure underlay
set interfaces lo0 unit 0 family inet address 10.1.1.1/32

# Configure VLANs and VNIs
set vlans VLAN10 vlan-id 10
set vlans VLAN10 vxlan vni 5000
set vlans VLAN20 vlan-id 20
set vlans VLAN20 vxlan vni 6000

# Configure VTEP
set switch-options vtep-source-interface lo0.0
set switch-options route-distinguisher 10.1.1.1:1
set switch-options vrf-target target:65000:1

# Configure EVPN
set protocols evpn encapsulation vxlan
set protocols evpn extended-vni-list all

# Configure BGP
set protocols bgp group EVPN type internal
set protocols bgp group EVPN local-address 10.1.1.1
set protocols bgp group EVPN family evpn signaling
set protocols bgp group EVPN neighbor 10.100.100.1

# Configure IRB for routing
set interfaces irb unit 10 family inet address 192.168.10.1/24
set interfaces irb unit 10 virtual-gateway-address 192.168.10.254
set interfaces irb unit 20 family inet address 192.168.20.1/24
set interfaces irb unit 20 virtual-gateway-address 192.168.20.254

set vlans VLAN10 l3-interface irb.10
set vlans VLAN20 l3-interface irb.20

10.5 Linux with FRRouting - VXLAN with EVPN
--------------------------------------------
# Create VXLAN interface
ip link add vxlan5000 type vxlan \
  id 5000 \
  dstport 4789 \
  local 10.1.1.1 \
  nolearning

# Create bridge and add VXLAN
ip link add br10 type bridge
ip link set vxlan5000 master br10
ip link set eth1 master br10

# Bring up interfaces
ip link set vxlan5000 up
ip link set br10 up

# Configure FRRouting for EVPN
# /etc/frr/frr.conf
router bgp 65001
 bgp router-id 10.1.1.1
 neighbor 10.100.100.1 remote-as 65001
 neighbor 10.100.100.1 update-source lo
 !
 address-family l2vpn evpn
  neighbor 10.100.100.1 activate
  advertise-all-vni
 exit-address-family
!

================================================================================
11. VXLAN VERIFICATION AND TROUBLESHOOTING
================================================================================

11.1 Cisco Nexus Verification Commands
---------------------------------------
# Verify NVE interface status
show nve interface
show nve interface nve1 detail

# Verify VNI status
show nve vni
show nve vni 5000 detail

# Verify VXLAN peers
show nve peers
show nve peers detail

# Verify MAC address table
show l2route evpn mac all
show l2route evpn mac-ip all
show l2route topology detail

# Verify EVPN routes
show bgp l2vpn evpn
show bgp l2vpn evpn vni-id 5000
show bgp l2vpn evpn summary

# Verify forwarding
show forwarding distribution multicast route
show vxlan interface
show mac address-table vlan 10

# Debug
debug nve all
debug evpn all

11.2 Arista EOS Verification Commands
--------------------------------------
# Verify VXLAN interface
show interfaces vxlan1
show vxlan config-sanity
show vxlan vtep

# Verify VNI mappings
show vxlan vni
show vxlan address-table

# Verify EVPN routes
show bgp evpn summary
show bgp evpn route-type mac-ip
show bgp evpn instance

# Verify MAC addresses
show mac address-table vlan 10
show vxlan address-table evpn

11.3 Juniper QFX Verification Commands
---------------------------------------
# Verify VTEP
show interfaces vtep
show ethernet-switching vxlan-tunnel-end-point source

# Verify VNI
show vlans extensive
show ethernet-switching vxlan-tunnel-end-point remote

# Verify EVPN
show evpn instance
show evpn database
show route table bgp.evpn.0

# Verify MAC addresses
show ethernet-switching table

11.4 Linux Verification Commands
---------------------------------
# Verify VXLAN interface
ip -d link show vxlan5000
bridge fdb show dev vxlan5000

# Verify bridge
bridge vlan show
bridge link show

# Verify FRRouting EVPN
vtysh -c "show bgp l2vpn evpn summary"
vtysh -c "show evpn vni"
vtysh -c "show evpn mac vni 5000"

11.5 Common Issues and Troubleshooting
---------------------------------------
Issue: VTEPs not forming adjacency
- Check underlay IP reachability (ping VTEP IPs)
- Verify UDP 4789 not blocked by firewall
- Check NVE interface status (no shutdown)
- Verify multicast groups (if using multicast mode)

Issue: MAC addresses not learning
- Check VLAN-to-VNI mapping
- Verify VNI exists on both VTEPs
- Check access port configuration
- Review ARP suppression settings

Issue: EVPN routes not exchanging
- Verify BGP neighbor status
- Check address-family l2vpn evpn activated
- Verify route-target import/export
- Check route distinguisher configuration

Issue: Packet loss or high latency
- Verify MTU settings (underlay >= overlay + 50 bytes)
- Check for fragmentation (show ip traffic)
- Verify underlay routing (ECMP working)
- Review QoS settings

Issue: Asymmetric routing
- Check symmetric IRB configuration
- Verify L3VNI configured on all VTEPs
- Review anycast gateway settings

Packet Capture:
# Capture VXLAN traffic
tcpdump -i eth0 -n udp port 4789 -vv

# Decode VXLAN
tcpdump -i eth0 -n udp port 4789 -vv -X

================================================================================
12. VXLAN DESIGN BEST PRACTICES
================================================================================

12.1 Underlay Network Design
-----------------------------
☐ Use BGP or OSPF for underlay routing
☐ Enable ECMP for load balancing (4-8 paths)
☐ Configure jumbo MTU (9000+ bytes)
☐ Use PTP (point-to-point) interfaces in underlay
☐ Implement BFD for fast failure detection
☐ Use /31 subnets for point-to-point links (RFC 3021)
☐ Avoid Layer 2 in underlay (use pure Layer 3 fabric)

12.2 Overlay Network Design
----------------------------
☐ Use EVPN for control plane (avoid multicast)
☐ Plan VNI allocation strategy (per-tenant, per-application)
☐ Implement symmetric IRB for inter-VXLAN routing
☐ Use L3VNI for tenant separation at Layer 3
☐ Configure anycast gateway for optimal routing
☐ Enable ARP suppression to reduce broadcast
☐ Plan for future growth (VNI numbering scheme)

12.3 VTEP Placement
-------------------
☐ Deploy VTEPs close to workloads (ToR switches, hypervisors)
☐ Use loopback interfaces for VTEP source
☐ Consider anycast VTEP for active-active (vPC/MLAG)
☐ Size VTEPs for expected MAC table size
☐ Plan for hardware resources (TCAM, forwarding capacity)

12.4 High Availability
----------------------
☐ Configure redundant VTEPs (vPC, MLAG, ESI)
☐ Use multiple route reflectors for EVPN
☐ Implement BFD for fast convergence
☐ Enable EVPN multihoming (active-active per VNI)
☐ Plan for VTEP failure scenarios
☐ Use anycast gateway for stateless failover

12.5 Security
-------------
☐ Isolate underlay management (separate VRF)
☐ Implement access control on VNI membership
☐ Use Route Targets for VRF isolation
☐ Consider encryption (MACsec in underlay or overlay encryption)
☐ Implement rate limiting for control plane
☐ Monitor for anomalous MAC learning

12.6 Scalability
----------------
☐ Use route reflectors (avoid full mesh BGP)
☐ Implement route filtering with RT constraints
☐ Plan VNI-to-VLAN mappings centrally
☐ Monitor MAC table utilization
☐ Consider hierarchical EVPN for very large deployments
☐ Use Type 5 routes for prefix summarization

12.7 Operations
---------------
☐ Document VNI allocation (IPAM/DCIM)
☐ Implement consistent naming conventions
☐ Use automation for configuration (Ansible, Terraform)
☐ Monitor underlay and overlay health
☐ Establish MTU testing procedures
☐ Create troubleshooting runbooks
☐ Plan for software upgrades (ISSU/NSU)

================================================================================
13. VXLAN USE CASES
================================================================================

13.1 Data Center Interconnect (DCI)
------------------------------------
- Extend Layer 2 across geographically separated data centers
- Support VM mobility between sites
- Disaster recovery (DR) scenarios
- Requirements: Low latency, high bandwidth WAN

13.2 Multi-Tenant Cloud
-----------------------
- Provide isolated networks per customer/tenant
- Scale beyond 4K VLAN limitation
- Enable self-service network provisioning
- Examples: AWS VPC, Azure VNet, OpenStack Neutron

13.3 Network Function Virtualization (NFV)
-------------------------------------------
- Connect virtual network functions (VNFs)
- Service chaining across virtual appliances
- Dynamic network topology

13.4 Containerized Applications
--------------------------------
- Kubernetes networking (Calico, Cilium with VXLAN mode)
- Docker overlay networks
- Microservices communication

13.5 Campus Networks
--------------------
- Large campus network segmentation
- Extend VLANs across buildings
- Replace traditional STP-based Layer 2

13.6 Edge Computing
-------------------
- Connect edge locations to central data center
- Low-latency overlay for distributed applications
- IoT device connectivity

================================================================================
14. VXLAN ALTERNATIVES AND COMPARISONS
================================================================================

14.1 VXLAN vs NVGRE
-------------------
NVGRE (Network Virtualization using Generic Routing Encapsulation):
- Microsoft's alternative to VXLAN
- Uses GRE encapsulation instead of UDP
- 24-bit Tenant Network ID (similar to VNI)
- Less common in practice (mainly Hyper-V)

14.2 VXLAN vs GENEVE
---------------------
GENEVE (Generic Network Virtualization Encapsulation):
- IETF standard (RFC 8926)
- Designed to unify VXLAN and NVGRE
- Variable-length options for extensibility
- Supported by VMware NSX-T, OVN, Linux kernel
- Future direction for network virtualization

14.3 VXLAN vs STT
------------------
STT (Stateless Transport Tunneling):
- Uses TCP-like header (but stateless)
- Better ECMP distribution
- Not widely adopted outside VMware

14.4 VXLAN vs MPLS L2VPN
-------------------------
┌──────────────────┬────────────────────┬──────────────────────┐
│ Feature          │ VXLAN              │ MPLS L2VPN           │
├──────────────────┼────────────────────┼──────────────────────┤
│ Underlay         │ IP (any)           │ MPLS core            │
│ Encapsulation    │ MAC-in-UDP         │ Ethernet over MPLS   │
│ Scalability      │ 16M segments       │ Limited by LDP/RSVP  │
│ Use Case         │ Data center        │ Service provider WAN │
│ Control Plane    │ EVPN, multicast    │ LDP, BGP             │
└──────────────────┴────────────────────┴──────────────────────┘

================================================================================
REFERENCES AND DOCUMENTATION
================================================================================

1. VXLAN Core Specifications
   - RFC 7348: Virtual eXtensible Local Area Network (VXLAN): A Framework
               for Overlaying Virtualized Layer 2 Networks over Layer 3
               Networks (2014)
   - RFC 8365: A Network Virtualization Overlay Solution Using Ethernet VPN
               (EVPN) (2018)

2. EVPN Specifications
   - RFC 7432: BGP MPLS-Based Ethernet VPN (2015)
   - RFC 8214: Virtual Private Wire Service Support in Ethernet VPN (2017)
   - RFC 9135: Integrated Routing and Bridging in EVPN (2021)
   - RFC 9136: IP Prefix Advertisement in EVPN (2021)

3. Related Standards
   - RFC 8926: Geneve: Generic Network Virtualization Encapsulation (2020)
   - RFC 7637: NVGRE: Network Virtualization Using Generic Routing
               Encapsulation (2015)

4. Cisco Documentation
   - Cisco Nexus 9000 Series NX-OS VXLAN Configuration Guide
     https://www.cisco.com/c/en/us/td/docs/dcn/nx-os/nexus9000/
   - Cisco VXLAN EVPN Multi-Site Design and Deployment White Paper
   - Cisco Data Center Spine-and-Leaf Architecture: Design Overview

5. Arista Documentation
   - Arista VXLAN Design Guide
     https://www.arista.com/en/solutions/vxlan
   - EVPN Deployment Guide
   - CloudVision VXLAN Automation Guide

6. Juniper Documentation
   - Juniper QFX Series EVPN-VXLAN User Guide
     https://www.juniper.net/documentation/us/en/software/junos/evpn-vxlan/
   - Day One: Data Center Deployment with EVPN and VXLAN
   - EVPN-VXLAN Architecture Guide

7. Books
   - "VXLAN Network with MP-BGP EVPN Control Plane" by Vinit Jain and
     Arvind Durai (Independently published, 2020)
   - "Building a Modern Data Center: Principles and Design of the Spine
     and Leaf Architecture" by Derick Winkworth (O'Reilly, 2021)

8. VMware NSX Documentation
   - VMware NSX Data Center Documentation
     https://docs.vmware.com/en/VMware-NSX/
   - NSX Reference Design Guide

9. Linux Networking
   - Linux VXLAN kernel documentation
     https://www.kernel.org/doc/Documentation/networking/vxlan.txt
   - FRRouting EVPN documentation
     https://docs.frrouting.org/en/latest/evpn.html

10. Industry Resources
    - IETF NVO3 (Network Virtualization Overlays) Working Group
      https://datatracker.ietf.org/wg/nvo3/
    - IETF BESS (BGP Enabled Services) Working Group
      https://datatracker.ietf.org/wg/bess/

11. Whitepapers and Guides
    - "Introduction to VXLAN" - Various vendor whitepapers
    - "EVPN Fundamentals" - Juniper Networks
    - "Cisco ACI and VXLAN Fabric" - Cisco Systems

12. Training and Certification
    - Cisco DCCOR 350-601 (Implementing Cisco Data Center Core Technologies)
    - Arista ACE: Arista Certified Engineering courses
    - Juniper JNCIS-DC and JNCIE-DC certifications

================================================================================
VXLAN DEPLOYMENT CHECKLIST
================================================================================

☐ Planning Phase
  ☐ Define VNI numbering scheme and allocation
  ☐ Plan IP addressing for underlay (VTEP IPs, point-to-point links)
  ☐ Plan overlay addressing (subnets per VNI)
  ☐ Determine control plane (multicast, ingress replication, EVPN)
  ☐ Size hardware for MAC table requirements
  ☐ Plan MTU across entire network (minimum 1600, recommend 9000)
  ☐ Document tenant isolation requirements

☐ Underlay Configuration
  ☐ Configure IGP or BGP for underlay routing
  ☐ Enable ECMP for load balancing
  ☐ Configure MTU on all interfaces
  ☐ Implement BFD for fast failure detection
  ☐ Verify IP reachability between all VTEPs
  ☐ Test underlay bandwidth and latency

☐ Overlay Configuration
  ☐ Configure VTEP source interfaces (loopbacks)
  ☐ Create VLANs and map to VNIs
  ☐ Configure NVE interface
  ☐ Set up control plane (LDP/EVPN)
  ☐ Configure BGP for EVPN (if applicable)
  ☐ Enable ARP suppression
  ☐ Configure anycast gateway

☐ Routing Configuration (if inter-VXLAN routing needed)
  ☐ Create VRFs for tenants
  ☐ Configure L3VNI
  ☐ Set up symmetric IRB
  ☐ Configure distributed anycast gateway
  ☐ Advertise Type 5 routes (if needed)

☐ High Availability
  ☐ Configure VTEP redundancy (vPC/MLAG/ESI)
  ☐ Set up route reflectors (for EVPN)
  ☐ Test failover scenarios
  ☐ Verify BFD operation

☐ Testing and Validation
  ☐ Verify VTEP adjacencies
  ☐ Check VNI status on all VTEPs
  ☐ Test MAC learning (data plane and control plane)
  ☐ Verify ARP suppression working
  ☐ Test inter-VXLAN routing
  ☐ Perform MTU testing (ping with DF bit set)
  ☐ Validate ECMP load balancing
  ☐ Test failover and convergence times

☐ Security
  ☐ Implement VNI access control
  ☐ Configure Route Target filtering
  ☐ Enable control plane authentication
  ☐ Review and limit VNI membership
  ☐ Consider encryption requirements

☐ Monitoring and Operations
  ☐ Set up monitoring for VTEP status
  ☐ Monitor BGP EVPN session health
  ☐ Track MAC table utilization
  ☐ Monitor underlay link utilization
  ☐ Set up alerts for convergence events
  ☐ Create operational runbooks
  ☐ Document as-built configuration

================================================================================
END OF DOCUMENT
================================================================================
